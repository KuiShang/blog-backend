[2018-01-29T17:20:32.735] [INFO] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c29ed5a450c303652bc9f,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038061772,
    modify_time: 1517038061772,
    id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a0e5a450c303652bca0,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038094256,
    modify_time: 1517038094256,
    id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a39c3556430c4fb2f60,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038137050,
    modify_time: 1517038137050,
    id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6c2dedc3556430c4fb2f61,
    title: 'aaa',
    summary: 'bbbbb  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60a',
    status: 2,
    create_time: 1517039085227,
    modify_time: 1517039085227,
    id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '大前端',
    tags: [ [Object] ] },
  { tag_ids: [],
    _id: 5a6c2fbfb757e736e17ee757,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517039551011,
    modify_time: 1517039551011,
    id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c326bb757e736e17ee758,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040235486,
    modify_time: 1517040235486,
    id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32a1b757e736e17ee759,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040289298,
    modify_time: 1517040289298,
    id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32e9450648420c714bad,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040361842,
    modify_time: 1517040361842,
    id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f5450648420c714bae,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040373916,
    modify_time: 1517040373916,
    id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f7450648420c714baf,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040375092,
    modify_time: 1517040375092,
    id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] } ]
[2018-01-29T17:21:16.407] [INFO] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c29ed5a450c303652bc9f,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038061772,
    modify_time: 1517038061772,
    id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a0e5a450c303652bca0,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038094256,
    modify_time: 1517038094256,
    id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a39c3556430c4fb2f60,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038137050,
    modify_time: 1517038137050,
    id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6c2dedc3556430c4fb2f61,
    title: 'aaa',
    summary: 'bbbbb  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60a',
    status: 2,
    create_time: 1517039085227,
    modify_time: 1517039085227,
    id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '大前端',
    tags: [ [Object] ] },
  { tag_ids: [],
    _id: 5a6c2fbfb757e736e17ee757,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517039551011,
    modify_time: 1517039551011,
    id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c326bb757e736e17ee758,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040235486,
    modify_time: 1517040235486,
    id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32a1b757e736e17ee759,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040289298,
    modify_time: 1517040289298,
    id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32e9450648420c714bad,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040361842,
    modify_time: 1517040361842,
    id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f5450648420c714bae,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040373916,
    modify_time: 1517040373916,
    id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f7450648420c714baf,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040375092,
    modify_time: 1517040375092,
    id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] } ]
[2018-01-29T17:29:57.847] [INFO] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c29ed5a450c303652bc9f,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038061772,
    modify_time: 1517038061772,
    id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a0e5a450c303652bca0,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038094256,
    modify_time: 1517038094256,
    id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a39c3556430c4fb2f60,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038137050,
    modify_time: 1517038137050,
    id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6c2dedc3556430c4fb2f61,
    title: 'aaa',
    summary: 'bbbbb  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60a',
    status: 2,
    create_time: 1517039085227,
    modify_time: 1517039085227,
    id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '大前端',
    tags: [ [Object] ] },
  { tag_ids: [],
    _id: 5a6c2fbfb757e736e17ee757,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517039551011,
    modify_time: 1517039551011,
    id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c326bb757e736e17ee758,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040235486,
    modify_time: 1517040235486,
    id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32a1b757e736e17ee759,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040289298,
    modify_time: 1517040289298,
    id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32e9450648420c714bad,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040361842,
    modify_time: 1517040361842,
    id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f5450648420c714bae,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040373916,
    modify_time: 1517040373916,
    id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f7450648420c714baf,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040375092,
    modify_time: 1517040375092,
    id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] } ]
[2018-01-29T17:31:12.177] [INFO] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c29ed5a450c303652bc9f,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038061772,
    modify_time: 1517038061772,
    id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a0e5a450c303652bca0,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038094256,
    modify_time: 1517038094256,
    id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a39c3556430c4fb2f60,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038137050,
    modify_time: 1517038137050,
    id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6c2dedc3556430c4fb2f61,
    title: 'aaa',
    summary: 'bbbbb  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60a',
    status: 2,
    create_time: 1517039085227,
    modify_time: 1517039085227,
    id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '大前端',
    tags: [ [Object] ] },
  { tag_ids: [],
    _id: 5a6c2fbfb757e736e17ee757,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517039551011,
    modify_time: 1517039551011,
    id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c326bb757e736e17ee758,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040235486,
    modify_time: 1517040235486,
    id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32a1b757e736e17ee759,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040289298,
    modify_time: 1517040289298,
    id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32e9450648420c714bad,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040361842,
    modify_time: 1517040361842,
    id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f5450648420c714bae,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040373916,
    modify_time: 1517040373916,
    id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f7450648420c714baf,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040375092,
    modify_time: 1517040375092,
    id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] } ]
[2018-01-29T17:50:39.203] [INFO] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c29ed5a450c303652bc9f,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038061772,
    modify_time: 1517038061772,
    id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a0e5a450c303652bca0,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038094256,
    modify_time: 1517038094256,
    id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a39c3556430c4fb2f60,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038137050,
    modify_time: 1517038137050,
    id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6c2dedc3556430c4fb2f61,
    title: 'aaa',
    summary: 'bbbbb  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60a',
    status: 2,
    create_time: 1517039085227,
    modify_time: 1517039085227,
    id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '大前端',
    tags: [ [Object] ] },
  { tag_ids: [],
    _id: 5a6c2fbfb757e736e17ee757,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517039551011,
    modify_time: 1517039551011,
    id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c326bb757e736e17ee758,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040235486,
    modify_time: 1517040235486,
    id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32a1b757e736e17ee759,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040289298,
    modify_time: 1517040289298,
    id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32e9450648420c714bad,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040361842,
    modify_time: 1517040361842,
    id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f5450648420c714bae,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040373916,
    modify_time: 1517040373916,
    id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f7450648420c714baf,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040375092,
    modify_time: 1517040375092,
    id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] } ]
[2018-01-29T17:51:44.124] [INFO] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c29ed5a450c303652bc9f,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038061772,
    modify_time: 1517038061772,
    id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a0e5a450c303652bca0,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038094256,
    modify_time: 1517038094256,
    id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a39c3556430c4fb2f60,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038137050,
    modify_time: 1517038137050,
    id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6c2dedc3556430c4fb2f61,
    title: 'aaa',
    summary: 'bbbbb  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60a',
    status: 2,
    create_time: 1517039085227,
    modify_time: 1517039085227,
    id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '大前端',
    tags: [ [Object] ] },
  { tag_ids: [],
    _id: 5a6c2fbfb757e736e17ee757,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517039551011,
    modify_time: 1517039551011,
    id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c326bb757e736e17ee758,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040235486,
    modify_time: 1517040235486,
    id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32a1b757e736e17ee759,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040289298,
    modify_time: 1517040289298,
    id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32e9450648420c714bad,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040361842,
    modify_time: 1517040361842,
    id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f5450648420c714bae,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040373916,
    modify_time: 1517040373916,
    id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f7450648420c714baf,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040375092,
    modify_time: 1517040375092,
    id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] } ]
[2018-01-29T17:53:38.816] [INFO] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c29ed5a450c303652bc9f,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038061772,
    modify_time: 1517038061772,
    id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a0e5a450c303652bca0,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038094256,
    modify_time: 1517038094256,
    id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a39c3556430c4fb2f60,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038137050,
    modify_time: 1517038137050,
    id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6c2dedc3556430c4fb2f61,
    title: 'aaa',
    summary: 'bbbbb  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60a',
    status: 2,
    create_time: 1517039085227,
    modify_time: 1517039085227,
    id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '大前端',
    tags: [ [Object] ] },
  { tag_ids: [],
    _id: 5a6c2fbfb757e736e17ee757,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517039551011,
    modify_time: 1517039551011,
    id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c326bb757e736e17ee758,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040235486,
    modify_time: 1517040235486,
    id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32a1b757e736e17ee759,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040289298,
    modify_time: 1517040289298,
    id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32e9450648420c714bad,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040361842,
    modify_time: 1517040361842,
    id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f5450648420c714bae,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040373916,
    modify_time: 1517040373916,
    id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f7450648420c714baf,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040375092,
    modify_time: 1517040375092,
    id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] } ]
[2018-01-29T18:07:17.744] [INFO] info - 123
[2018-01-29T18:08:27.227] [INFO] info - 123
[2018-01-29T18:10:06.748] [INFO] info - 123
[2018-01-29T18:10:06.757] [DEBUG] info - 456
[2018-01-29T18:12:25.741] [DEBUG] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c29ed5a450c303652bc9f,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038061772,
    modify_time: 1517038061772,
    id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a0e5a450c303652bca0,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038094256,
    modify_time: 1517038094256,
    id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a39c3556430c4fb2f60,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038137050,
    modify_time: 1517038137050,
    id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6c2dedc3556430c4fb2f61,
    title: 'aaa',
    summary: 'bbbbb  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60a',
    status: 2,
    create_time: 1517039085227,
    modify_time: 1517039085227,
    id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '大前端',
    tags: [ [Object] ] },
  { tag_ids: [],
    _id: 5a6c2fbfb757e736e17ee757,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517039551011,
    modify_time: 1517039551011,
    id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c326bb757e736e17ee758,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040235486,
    modify_time: 1517040235486,
    id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32a1b757e736e17ee759,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040289298,
    modify_time: 1517040289298,
    id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32e9450648420c714bad,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040361842,
    modify_time: 1517040361842,
    id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f5450648420c714bae,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040373916,
    modify_time: 1517040373916,
    id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f7450648420c714baf,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040375092,
    modify_time: 1517040375092,
    id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] } ]
[2018-01-29T18:13:19.469] [DEBUG] info - 文章列表 [ { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c29ed5a450c303652bc9f,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038061772,
    modify_time: 1517038061772,
    id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a0e5a450c303652bca0,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038094256,
    modify_time: 1517038094256,
    id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc', '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6c2a39c3556430c4fb2f60,
    title: 'yyy',
    summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517038137050,
    modify_time: 1517038137050,
    id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object], [Object] ] },
  { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6c2dedc3556430c4fb2f61,
    title: 'aaa',
    summary: 'bbbbb  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60a',
    status: 2,
    create_time: 1517039085227,
    modify_time: 1517039085227,
    id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
    __v: 0,
    catalog_name: '大前端',
    tags: [ [Object] ] },
  { tag_ids: [],
    _id: 5a6c2fbfb757e736e17ee757,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517039551011,
    modify_time: 1517039551011,
    id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c326bb757e736e17ee758,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040235486,
    modify_time: 1517040235486,
    id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32a1b757e736e17ee759,
    title: '2',
    summary: '2  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040289298,
    modify_time: 1517040289298,
    id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32e9450648420c714bad,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040361842,
    modify_time: 1517040361842,
    id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f5450648420c714bae,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040373916,
    modify_time: 1517040373916,
    id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] },
  { tag_ids: [],
    _id: 5a6c32f7450648420c714baf,
    title: '',
    summary: '',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60c',
    status: 2,
    create_time: 1517040375092,
    modify_time: 1517040375092,
    id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
    __v: 0,
    catalog_name: '创业与经济',
    tags: [] } ]
[2018-01-29T18:14:10.871] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T18:19:13.608] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T18:19:17.555] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T18:19:57.297] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T18:44:11.813] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T18:49:16.722] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T18:49:20.253] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T18:59:32.241] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T18:59:54.906] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T19:01:15.210] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T19:01:25.440] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T19:01:34.946] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T19:03:12.574] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T19:03:28.533] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T19:03:39.232] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-29T19:03:50.089] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T09:55:01.183] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T09:55:10.003] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T09:57:34.284] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T09:57:40.543] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T09:57:43.213] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T09:58:09.438] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T09:59:34.250] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T09:59:42.766] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T09:59:48.790] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T09:59:54.454] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:02:27.681] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:04:51.595] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:04:53.614] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:05:10.748] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:05:14.469] [DEBUG] info - 文章列表: { total: 18,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2dedc3556430c4fb2f61,
       title: 'aaa',
       summary: 'bbbbb  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517039085227,
       modify_time: 1517039085227,
       id: 'f15bb7b0-0335-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c2fbfb757e736e17ee757,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517039551011,
       modify_time: 1517039551011,
       id: '06fcb730-0337-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c326bb757e736e17ee758,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040235486,
       modify_time: 1517040235486,
       id: '9ef74fe0-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32a1b757e736e17ee759,
       title: '2',
       summary: '2  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040289298,
       modify_time: 1517040289298,
       id: 'bf0a5f20-0338-11e8-bb73-69d5d8dab254',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32e9450648420c714bad,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040361842,
       modify_time: 1517040361842,
       id: 'ea47dc30-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f5450648420c714bae,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040373916,
       modify_time: 1517040373916,
       id: 'f17a0dc0-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] },
     { tag_ids: [],
       _id: 5a6c32f7450648420c714baf,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040375092,
       modify_time: 1517040375092,
       id: 'f22d7f40-0338-11e8-a6ba-df753ee2d701',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:10:30.722] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:10:33.810] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:16:38.761] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:16:44.370] [DEBUG] info - NaN
[2018-01-30T10:16:44.428] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:18:24.991] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:18:34.127] [INFO] info - NaN
[2018-01-30T10:18:34.190] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:19:12.082] [INFO] info - NaN
[2018-01-30T10:19:12.127] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:19:50.919] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:19:58.435] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:20:02.112] [INFO] info - NaN
[2018-01-30T10:20:33.775] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:22:01.447] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:22:30.821] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:22:33.598] [DEBUG] info - NaN
[2018-01-30T10:23:23.131] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [],
       _id: 5a6c33ccc65e814296cb1de5,
       title: '',
       summary: '',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517040588229,
       modify_time: 1517040588229,
       id: '71379f50-0339-11e8-996b-2565200e7305',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [] } ] }
[2018-01-30T10:23:25.264] [DEBUG] info - 71379f50-0339-11e8-996b-2565200e7305
[2018-01-30T10:23:39.389] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:24:22.701] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a39c3556430c4fb2f60,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038137050,
       modify_time: 1517038137050,
       id: 'bc3363a0-0333-11e8-81f1-ed6738bb97d7',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:24:25.264] [DEBUG] info - article-id: bc3363a0-0333-11e8-81f1-ed6738bb97d7
[2018-01-30T10:24:35.429] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6c2a0e5a450c303652bca0,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038094256,
       modify_time: 1517038094256,
       id: 'a2b18b00-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:24:47.837] [DEBUG] info - article-id: a2b18b00-0333-11e8-8afc-5d794ad06765
[2018-01-30T10:25:08.930] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:28:12.681] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:28:17.334] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:28:26.684] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6fd84a944d5f233e3e2105,
       title: '123',
       summary: 'adfasdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517279306598,
       modify_time: 1517279306598,
       id: '40740060-0565-11e8-a6a8-552e4c4f877e',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-01-30T10:29:00.788] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6fd84a944d5f233e3e2105,
       title: '123',
       summary: 'adfasdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517279306598,
       modify_time: 1517279306598,
       id: '40740060-0565-11e8-a6a8-552e4c4f877e',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6fd86c944d5f233e3e2106,
       title: 'asdf',
       summary: 'vxbxbcxbv  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517279340720,
       modify_time: 1517279340720,
       id: '54ca9b00-0565-11e8-a6a8-552e4c4f877e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:29:45.317] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6fd84a944d5f233e3e2105,
       title: '123',
       summary: 'adfasdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517279306598,
       modify_time: 1517279306598,
       id: '40740060-0565-11e8-a6a8-552e4c4f877e',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6fd86c944d5f233e3e2106,
       title: 'asdf',
       summary: 'vxbxbcxbv  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517279340720,
       modify_time: 1517279340720,
       id: '54ca9b00-0565-11e8-a6a8-552e4c4f877e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:47:45.031] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6fd84a944d5f233e3e2105,
       title: '123',
       summary: 'adfasdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517279306598,
       modify_time: 1517279306598,
       id: '40740060-0565-11e8-a6a8-552e4c4f877e',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6fd86c944d5f233e3e2106,
       title: 'asdf',
       summary: 'vxbxbcxbv  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517279340720,
       modify_time: 1517279340720,
       id: '54ca9b00-0565-11e8-a6a8-552e4c4f877e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:47:56.542] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6fd84a944d5f233e3e2105,
       title: '123',
       summary: 'adfasdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517279306598,
       modify_time: 1517279306598,
       id: '40740060-0565-11e8-a6a8-552e4c4f877e',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6fd86c944d5f233e3e2106,
       title: 'asdf',
       summary: 'vxbxbcxbv  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517279340720,
       modify_time: 1517279340720,
       id: '54ca9b00-0565-11e8-a6a8-552e4c4f877e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:48:04.116] [DEBUG] info - article-id: 54ca9b00-0565-11e8-a6a8-552e4c4f877e
[2018-01-30T10:48:04.179] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6fd84a944d5f233e3e2105,
       title: '123',
       summary: 'adfasdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517279306598,
       modify_time: 1517279306598,
       id: '40740060-0565-11e8-a6a8-552e4c4f877e',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-01-30T10:48:12.689] [DEBUG] info - article-id: 40740060-0565-11e8-a6a8-552e4c4f877e
[2018-01-30T10:48:12.730] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T10:59:10.202] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T11:02:22.691] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T11:03:19.121] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T11:21:41.121] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T11:26:03.174] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T11:29:02.820] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T11:33:54.270] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T11:34:32.994] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T11:34:36.757] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:27:10.692] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:27:30.299] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:27:33.726] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:27:43.812] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ff43fbd0d203dcf7f20ef,
       title: '123',
       summary: '123132123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517286463752,
       modify_time: 1517286463752,
       id: 'ea730880-0575-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:27:54.345] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ff43fbd0d203dcf7f20ef,
       title: '123',
       summary: '123132123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517286463752,
       modify_time: 1517286463752,
       id: 'ea730880-0575-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ff44abd0d203dcf7f20f0,
       title: 'aaaa',
       summary: 'adgg  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517286474298,
       modify_time: 1517286474298,
       id: 'f0bc39a0-0575-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:28:02.962] [DEBUG] info - article-id: f0bc39a0-0575-11e8-bba0-31b43b59290f
[2018-01-30T12:28:02.986] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ff43fbd0d203dcf7f20ef,
       title: '123',
       summary: '123132123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517286463752,
       modify_time: 1517286463752,
       id: 'ea730880-0575-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:28:27.521] [DEBUG] info - article-id: ea730880-0575-11e8-bba0-31b43b59290f
[2018-01-30T12:28:27.566] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:29:46.280] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:29:50.087] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:30:00.839] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ff4c8bd0d203dcf7f20f1,
       title: '213',
       summary: '123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517286600761,
       modify_time: 1517286600761,
       id: '3c1cf290-0576-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:30:04.399] [DEBUG] info - article-id: 3c1cf290-0576-11e8-bba0-31b43b59290f
[2018-01-30T12:30:04.432] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:34:10.448] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:34:24.597] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:35:50.543] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6c29ed5a450c303652bc9f,
       title: 'yyy',
       summary: 'MongoDB remove()函数是用来移除集合中的数据  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517038061772,
       modify_time: 1517038061772,
       id: '8f54e0c0-0333-11e8-8afc-5d794ad06765',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:35:57.407] [DEBUG] info - article-id: 8f54e0c0-0333-11e8-8afc-5d794ad06765
[2018-01-30T12:35:57.423] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:36:28.433] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:36:32.373] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:36:41.969] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:37:07.040] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:37:13.748] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:37:19.275] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:37:27.122] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:47:52.981] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:48:13.378] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:48:28.946] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:48:33.242] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:48:43.175] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:48:44.792] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:48:51.565] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff933bd0d203dcf7f20f2,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287731505,
       modify_time: 1517287731505,
       id: 'de16ca10-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:49:01.974] [DEBUG] info - article-id: de16ca10-0578-11e8-bba0-31b43b59290f
[2018-01-30T12:49:01.993] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-01-30T12:49:05.002] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:59:29.248] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T12:59:31.732] [DEBUG] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6ff940bd0d203dcf7f20f3,
    title: '123',
    summary: '123213  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517287744943,
    modify_time: 1517287744943,
    id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
    __v: 0 } ]
[2018-01-30T12:59:31.734] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-30T12:59:31.736] [DEBUG] info - {}
[2018-01-30T13:01:31.738] [DEBUG] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6ff940bd0d203dcf7f20f3,
    title: '123',
    summary: '123213  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517287744943,
    modify_time: 1517287744943,
    id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
    __v: 0 } ]
[2018-01-30T13:01:31.739] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-30T13:01:31.740] [DEBUG] info - {}
[2018-01-30T13:01:59.574] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:24:41.931] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:24:52.037] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a700fb4bcc628525dfbfce6,
  title: 'rr',
  summary: 'rr  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60c',
  status: 2,
  create_time: 1517293492009,
  modify_time: 1517293492009,
  id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
  __v: 0 }
[2018-01-30T14:25:58.243] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T14:26:08.178] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fb' ],
  _id: 5a70100043323c5302fce1f8,
  title: 'cc',
  summary: 'cc  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517293568134,
  modify_time: 1517293568134,
  id: '74fdb260-0586-11e8-a9ba-2513953f557e',
  __v: 0 }
[2018-01-30T14:26:08.222] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:31:57.585] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:32:13.684] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a70116db7fcdd541e82086a,
  title: 'pp',
  summary: 'ppp  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517293933619,
  modify_time: 1517293933619,
  id: '4ed64830-0587-11e8-8eb3-19365d03a9f9',
  __v: 0 }
[2018-01-30T14:32:13.769] [DEBUG] info - 文章列表: { total: 5,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70116db7fcdd541e82086a,
       title: 'pp',
       summary: 'ppp  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293933619,
       modify_time: 1517293933619,
       id: '4ed64830-0587-11e8-8eb3-19365d03a9f9',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:34:27.750] [DEBUG] info - article-id: 4ed64830-0587-11e8-8eb3-19365d03a9f9
[2018-01-30T14:34:27.789] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:43:10.160] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:45:15.689] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:46:01.233] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:49:33.411] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:52:01.792] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:53:16.816] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:53:44.100] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:55:13.100] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a70100043323c5302fce1f8,
       title: 'cc',
       summary: 'cc  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517293568134,
       modify_time: 1517293568134,
       id: '74fdb260-0586-11e8-a9ba-2513953f557e',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:55:16.622] [DEBUG] info - article-id: 74fdb260-0586-11e8-a9ba-2513953f557e
[2018-01-30T14:55:16.659] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T14:55:25.493] [INFO] info - { content: '7',
  title: '77',
  summary: '7  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fc' ] }
[2018-01-30T14:55:25.559] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a7016dd04e9155c6788258e,
  title: '77',
  summary: '7  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517295325494,
  modify_time: 1517295325494,
  id: '8c75b470-058a-11e8-a0d3-19605d884033',
  __v: 0 }
[2018-01-30T14:55:25.627] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T14:59:47.961] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:01:22.200] [INFO] info - { status: 1 }
[2018-01-30T15:01:58.031] [INFO] info - { status: 1 }
[2018-01-30T15:01:58.045] [DEBUG] info - { ok: 0, n: 0, nModified: 0 }
[2018-01-30T15:02:25.019] [INFO] info - { status: 1 }
[2018-01-30T15:02:25.036] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:03:23.119] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:03:26.765] [INFO] info - { status: 1 }
[2018-01-30T15:03:26.771] [DEBUG] info - { ok: 0, n: 0, nModified: 0 }
[2018-01-30T15:03:40.230] [INFO] info - { status: 1 }
[2018-01-30T15:03:40.262] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:05:40.204] [INFO] info - { status: 1 }
[2018-01-30T15:05:40.207] [DEBUG] info - { ok: 1, nModified: 0, n: 1 }
[2018-01-30T15:15:32.364] [INFO] info - { status: 2 }
[2018-01-30T15:15:32.379] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:15:39.619] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:15:46.595] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:15:48.025] [INFO] info - { status: 1 }
[2018-01-30T15:15:48.036] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:15:55.194] [INFO] info - { status: 2 }
[2018-01-30T15:15:55.200] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:16:00.779] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:16:04.195] [INFO] info - { status: 2 }
[2018-01-30T15:16:04.200] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:16:06.806] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:16:11.370] [INFO] info - { status: 1 }
[2018-01-30T15:16:11.375] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:16:14.235] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:18:52.677] [INFO] info - { status: 1 }
[2018-01-30T15:18:52.684] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:22:13.253] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:22:41.964] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:22:55.178] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:23:07.541] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:23:10.259] [INFO] info - { status: 2 }
[2018-01-30T15:23:10.270] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:23:12.628] [INFO] info - { status: 1 }
[2018-01-30T15:23:12.634] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:23:19.349] [INFO] info - { status: 1 }
[2018-01-30T15:23:19.355] [DEBUG] info - { ok: 1, nModified: 0, n: 1 }
[2018-01-30T15:23:34.330] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:23:37.511] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:23:48.272] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:23:52.350] [INFO] info - { status: 2 }
[2018-01-30T15:23:52.356] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:24:08.892] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:24:11.408] [INFO] info - { status: 1 }
[2018-01-30T15:24:11.413] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:24:16.519] [INFO] info - { status: 2 }
[2018-01-30T15:24:16.525] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:24:58.999] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:25:00.985] [INFO] info - { status: 2 }
[2018-01-30T15:25:00.993] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:25:01.080] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:25:03.392] [INFO] info - { status: 1 }
[2018-01-30T15:25:03.414] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:25:03.472] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:25:04.672] [INFO] info - { status: 1 }
[2018-01-30T15:25:04.683] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:25:04.755] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:25:05.686] [INFO] info - { status: 1 }
[2018-01-30T15:25:05.692] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:25:05.751] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:31:15.209] [INFO] info - { status: 2 }
[2018-01-30T15:31:15.213] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:31:15.244] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:31:17.195] [INFO] info - { status: 1 }
[2018-01-30T15:31:17.200] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:31:17.231] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:31:18.529] [INFO] info - { status: 2 }
[2018-01-30T15:31:18.531] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:31:18.580] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:31:19.381] [INFO] info - { status: 1 }
[2018-01-30T15:31:19.384] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:31:19.419] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:31:20.049] [INFO] info - { status: 2 }
[2018-01-30T15:31:20.063] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:31:20.119] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:31:20.588] [INFO] info - { status: 1 }
[2018-01-30T15:31:20.594] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:31:20.651] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:31:21.618] [INFO] info - { status: 2 }
[2018-01-30T15:31:21.622] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:31:21.653] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:31:22.195] [INFO] info - { status: 1 }
[2018-01-30T15:31:22.200] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T15:31:22.249] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7016dd04e9155c6788258e,
       title: '77',
       summary: '7  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517295325494,
       modify_time: 1517295325494,
       id: '8c75b470-058a-11e8-a0d3-19605d884033',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-30T15:32:12.005] [DEBUG] info - article-id: 8c75b470-058a-11e8-a0d3-19605d884033
[2018-01-30T15:32:12.042] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:36:22.673] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:37:02.404] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:38:44.085] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:38:47.329] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:38:52.298] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:39:22.229] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:55:19.800] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:55:34.226] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:55:36.478] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:55:58.203] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:56:01.823] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:56:04.976] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:56:07.232] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T15:56:28.215] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:05:45.967] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:14:29.433] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:18:23.442] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:19:59.342] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:20:27.510] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:20:56.880] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:22:12.876] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:22:21.949] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:22:37.596] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:23:39.963] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:24:09.505] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:24:47.266] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:25:06.461] [INFO] info - { status: 1 }
[2018-01-30T16:25:06.477] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T16:25:06.541] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:25:08.107] [INFO] info - { status: 2 }
[2018-01-30T16:25:08.113] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T16:25:08.143] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:25:09.467] [INFO] info - { status: 2 }
[2018-01-30T16:25:09.473] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-30T16:25:09.509] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:27:07.497] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:27:09.625] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:27:11.798] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:27:14.822] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:27:20.596] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T16:42:11.813] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:29:55.431] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:39:13.900] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:41:22.801] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:41:35.641] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:46:30.782] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:46:45.210] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:53:09.219] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:54:26.434] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:54:33.937] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:55:07.463] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:56:41.015] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:56:49.502] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T17:57:42.859] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:13:48.653] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:14:53.711] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:14:57.148] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:22:24.445] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:22:28.944] [INFO] info - {}
[2018-01-30T18:22:28.945] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/tmp/upload_d493389f1d165eeb2d4ea8783d6e8171',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-30T10:22:28.943Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/tmp/upload_d493389f1d165eeb2d4ea8783d6e8171',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-30T18:24:28.963] [INFO] info - {}
[2018-01-30T18:24:28.965] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/tmp/upload_55914de42b6a9753fd3ca3e91290bdeb',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-30T10:24:28.963Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/tmp/upload_55914de42b6a9753fd3ca3e91290bdeb',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-30T18:31:53.421] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:32:31.418] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:33:03.250] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:33:06.462] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/controller/page/upload
[2018-01-30T18:34:49.089] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:34:52.480] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/controller/public/upload
[2018-01-30T18:36:21.851] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:36:28.158] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/controller/public/upload
[2018-01-30T18:37:05.305] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:37:16.085] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/controller/public/upload
[2018-01-30T18:38:47.398] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:38:53.609] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-30T18:38:53.613] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload
[2018-01-30T18:38:53.635] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 40011,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_cfb692a135c87d0a1c7ecc9071a03c42',
     name: 'timg (7).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-30T10:38:53.634Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_cfb692a135c87d0a1c7ecc9071a03c42',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 40011,
        closed: true } } }
[2018-01-30T18:40:38.231] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:40:50.311] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-30T18:40:50.315] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload
[2018-01-30T18:40:50.332] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 208288,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_abc8c66ce9bd812141c2d20546999267',
     name: 'timg (17.jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-30T10:40:50.332Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_abc8c66ce9bd812141c2d20546999267',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 208288,
        closed: true } } }
[2018-01-30T18:41:26.858] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:41:30.565] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-30T18:41:30.569] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload
[2018-01-30T18:41:30.587] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_94836b250cc569f9484dc305de60049f',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-30T10:41:30.586Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_94836b250cc569f9484dc305de60049f',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-30T18:43:15.315] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-30T18:43:18.689] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-30T18:43:18.692] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-30T18:43:18.712] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 349532,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_a0b280a347fa053de482a49df89cef20',
     name: 'timg (5).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-30T10:43:18.710Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_a0b280a347fa053de482a49df89cef20',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 349532,
        closed: true } } }
[2018-01-30T18:43:48.124] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-30T18:43:48.126] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-30T18:43:48.130] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 35855,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_4a8781f3c166360a5a0ac22592e3e363',
     name: 'timg (1).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-30T10:43:48.129Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_4a8781f3c166360a5a0ac22592e3e363',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 35855,
        closed: true } } }
[2018-01-31T14:27:45.498] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T14:30:11.186] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T14:30:44.889] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-31T14:30:44.891] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-31T14:30:44.913] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_d4bfa2df22cbea7092e633ab507adb2c',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-31T06:30:44.911Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_d4bfa2df22cbea7092e633ab507adb2c',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-31T14:34:02.875] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-31T14:34:02.878] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-31T14:34:02.899] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_c99d082380b8d15f8bc080eb8bb240ab',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-31T06:34:02.899Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_c99d082380b8d15f8bc080eb8bb240ab',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-31T14:39:52.244] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T14:47:01.325] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-31T14:47:01.327] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-31T14:47:01.332] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_42dcfe7d6919e16b43076f0dfcb4b79c',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-31T06:47:01.332Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_42dcfe7d6919e16b43076f0dfcb4b79c',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-31T14:47:38.827] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-31T14:47:38.832] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-31T14:47:38.852] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_8b31806738b31d22d529c14285ba5582',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-31T06:47:38.852Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_8b31806738b31d22d529c14285ba5582',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-31T14:49:08.508] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-31T14:49:08.512] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-31T14:49:08.526] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_1f5909d76d41b25ff11b9dcded11d30f',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-31T06:49:08.526Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_1f5909d76d41b25ff11b9dcded11d30f',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-31T14:56:34.873] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T14:56:44.318] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T15:01:13.977] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T15:01:17.250] [INFO] info - { status: 1 }
[2018-01-31T15:01:17.271] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-01-31T15:01:17.302] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T15:41:28.752] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T15:42:08.057] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T15:54:23.886] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T15:54:25.660] [ERROR] info - ReferenceError: req is not defined
    at getArticle (/home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:189:14)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at /home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:281:22
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:354:14)
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:365:14)
    at Function.process_params (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:410:3)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:275:10)
    at Function.handle (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:174:3)
    at router (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:47:12)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:317:13)
    at /home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:335:12)
[2018-01-31T15:55:02.653] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T15:55:41.893] [DEBUG] info - Query {
  _mongooseOptions: {},
  mongooseCollection: 
   NativeCollection {
     collection: Collection { s: [Object] },
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'article',
     collectionName: 'article',
     conn: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     queue: [],
     buffer: false,
     emitter: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: [Object], _posts: [Object] },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'article',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     discriminators: undefined,
     '$appliedMethods': true,
     getCatalogNameById: [Function],
     getTagNameById: [Function],
     saveContent: [Function],
     '$appliedHooks': true,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: {},
        singleNestedPaths: {},
        nested: {},
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: {},
        statics: [Object],
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: undefined,
        options: [Object],
        '$globalPluginsApplied': true,
        _requiredpaths: [],
        _indexedpaths: [] },
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     Query: { [Function] base: [Query] },
     '$__insertMany': [Function],
     insertMany: [Function],
     '$init': Promise { [Circular], catch: [Function] } },
  schema: 
   Schema {
     obj: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array] },
     paths: 
      { id: [SchemaString],
        title: [SchemaString],
        summary: [SchemaString],
        create_time: [SchemaNumber],
        modify_time: [SchemaNumber],
        catalog_id: [SchemaString],
        banner: [SchemaString],
        status: [SchemaNumber],
        tag_ids: [SchemaArray],
        _id: [ObjectId],
        __v: [SchemaNumber] },
     aliases: {},
     subpaths: {},
     virtuals: {},
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     statics: 
      { getCatalogNameById: [Function],
        getTagNameById: [Function],
        saveContent: [Function] },
     tree: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array],
        _id: [Object],
        __v: [Function: Number] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Kareem] },
     _userProvidedOptions: undefined,
     options: 
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     _requiredpaths: [],
     _indexedpaths: [] },
  op: 'find',
  options: {},
  _conditions: { id: 'e61943f0-0578-11e8-bba0-31b43b59290f' },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     collectionName: 'article' },
  _traceFunction: undefined }
[2018-01-31T15:55:41.917] [ERROR] info - TypeError: Converting circular structure to JSON
    at JSON.stringify (<anonymous>)
    at stringify (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:1119:12)
    at ServerResponse.json (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:260:14)
    at ServerResponse.send (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:158:21)
    at getArticle (/home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:192:9)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at /home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:281:22
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:354:14)
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:365:14)
    at Function.process_params (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:410:3)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:275:10)
    at Function.handle (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:174:3)
    at router (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:47:12)
[2018-01-31T15:56:20.561] [DEBUG] info - Query {
  _mongooseOptions: {},
  mongooseCollection: 
   NativeCollection {
     collection: Collection { s: [Object] },
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'article',
     collectionName: 'article',
     conn: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     queue: [],
     buffer: false,
     emitter: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: [Object], _posts: [Object] },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'article',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     discriminators: undefined,
     '$appliedMethods': true,
     getCatalogNameById: [Function],
     getTagNameById: [Function],
     saveContent: [Function],
     '$appliedHooks': true,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: {},
        singleNestedPaths: {},
        nested: {},
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: {},
        statics: [Object],
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: undefined,
        options: [Object],
        '$globalPluginsApplied': true,
        _requiredpaths: [],
        _indexedpaths: [] },
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     Query: { [Function] base: [Query] },
     '$__insertMany': [Function],
     insertMany: [Function],
     '$init': Promise { [Circular], catch: [Function] } },
  schema: 
   Schema {
     obj: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array] },
     paths: 
      { id: [SchemaString],
        title: [SchemaString],
        summary: [SchemaString],
        create_time: [SchemaNumber],
        modify_time: [SchemaNumber],
        catalog_id: [SchemaString],
        banner: [SchemaString],
        status: [SchemaNumber],
        tag_ids: [SchemaArray],
        _id: [ObjectId],
        __v: [SchemaNumber] },
     aliases: {},
     subpaths: {},
     virtuals: {},
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     statics: 
      { getCatalogNameById: [Function],
        getTagNameById: [Function],
        saveContent: [Function] },
     tree: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array],
        _id: [Object],
        __v: [Function: Number] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Kareem] },
     _userProvidedOptions: undefined,
     options: 
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     _requiredpaths: [],
     _indexedpaths: [] },
  op: 'find',
  options: {},
  _conditions: { id: 'e61943f0-0578-11e8-bba0-31b43b59290f' },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     collectionName: 'article' },
  _traceFunction: undefined }
[2018-01-31T15:56:20.579] [ERROR] info - TypeError: Converting circular structure to JSON
    at JSON.stringify (<anonymous>)
    at stringify (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:1119:12)
    at ServerResponse.json (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:260:14)
    at ServerResponse.send (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:158:21)
    at getArticle (/home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:192:9)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at /home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:281:22
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:354:14)
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:365:14)
    at Function.process_params (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:410:3)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:275:10)
    at Function.handle (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:174:3)
    at router (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:47:12)
[2018-01-31T15:56:53.380] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T15:57:47.301] [DEBUG] info - Query {
  _mongooseOptions: {},
  mongooseCollection: 
   NativeCollection {
     collection: Collection { s: [Object] },
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'article',
     collectionName: 'article',
     conn: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     queue: [],
     buffer: false,
     emitter: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: [Object], _posts: [Object] },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'article',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     discriminators: undefined,
     '$appliedMethods': true,
     getCatalogNameById: [Function],
     getTagNameById: [Function],
     saveContent: [Function],
     '$appliedHooks': true,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: {},
        singleNestedPaths: {},
        nested: {},
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: {},
        statics: [Object],
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: undefined,
        options: [Object],
        '$globalPluginsApplied': true,
        _requiredpaths: [],
        _indexedpaths: [] },
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     Query: { [Function] base: [Query] },
     '$__insertMany': [Function],
     insertMany: [Function],
     '$init': Promise { [Circular], catch: [Function] } },
  schema: 
   Schema {
     obj: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array] },
     paths: 
      { id: [SchemaString],
        title: [SchemaString],
        summary: [SchemaString],
        create_time: [SchemaNumber],
        modify_time: [SchemaNumber],
        catalog_id: [SchemaString],
        banner: [SchemaString],
        status: [SchemaNumber],
        tag_ids: [SchemaArray],
        _id: [ObjectId],
        __v: [SchemaNumber] },
     aliases: {},
     subpaths: {},
     virtuals: {},
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     statics: 
      { getCatalogNameById: [Function],
        getTagNameById: [Function],
        saveContent: [Function] },
     tree: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array],
        _id: [Object],
        __v: [Function: Number] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Kareem] },
     _userProvidedOptions: undefined,
     options: 
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     _requiredpaths: [],
     _indexedpaths: [] },
  op: 'find',
  options: {},
  _conditions: { id: 'e61943f0-0578-11e8-bba0-31b43b59290f' },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     collectionName: 'article' },
  _traceFunction: undefined }
[2018-01-31T15:57:47.323] [ERROR] info - TypeError: Converting circular structure to JSON
    at JSON.stringify (<anonymous>)
    at stringify (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:1119:12)
    at ServerResponse.json (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:260:14)
    at ServerResponse.send (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:158:21)
    at getArticle (/home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:192:9)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at /home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:281:22
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:354:14)
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:365:14)
    at Function.process_params (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:410:3)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:275:10)
    at Function.handle (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:174:3)
    at router (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:47:12)
[2018-01-31T16:00:08.633] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:00:09.713] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:00:09.716] [DEBUG] info - Query {
  _mongooseOptions: {},
  mongooseCollection: 
   NativeCollection {
     collection: Collection { s: [Object] },
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'article',
     collectionName: 'article',
     conn: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     queue: [],
     buffer: false,
     emitter: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: [Object], _posts: [Object] },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'article',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     discriminators: undefined,
     '$appliedMethods': true,
     getCatalogNameById: [Function],
     getTagNameById: [Function],
     saveContent: [Function],
     '$appliedHooks': true,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: {},
        singleNestedPaths: {},
        nested: {},
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: {},
        statics: [Object],
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: undefined,
        options: [Object],
        '$globalPluginsApplied': true,
        _requiredpaths: [],
        _indexedpaths: [] },
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     Query: { [Function] base: [Query] },
     '$__insertMany': [Function],
     insertMany: [Function],
     '$init': Promise { [Circular], catch: [Function] } },
  schema: 
   Schema {
     obj: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array] },
     paths: 
      { id: [SchemaString],
        title: [SchemaString],
        summary: [SchemaString],
        create_time: [SchemaNumber],
        modify_time: [SchemaNumber],
        catalog_id: [SchemaString],
        banner: [SchemaString],
        status: [SchemaNumber],
        tag_ids: [SchemaArray],
        _id: [ObjectId],
        __v: [SchemaNumber] },
     aliases: {},
     subpaths: {},
     virtuals: {},
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     statics: 
      { getCatalogNameById: [Function],
        getTagNameById: [Function],
        saveContent: [Function] },
     tree: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array],
        _id: [Object],
        __v: [Function: Number] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Kareem] },
     _userProvidedOptions: undefined,
     options: 
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     _requiredpaths: [],
     _indexedpaths: [] },
  op: 'find',
  options: {},
  _conditions: { id: 'e61943f0-0578-11e8-bba0-31b43b59290f' },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     collectionName: 'article' },
  _traceFunction: undefined }
[2018-01-31T16:00:09.733] [ERROR] info - TypeError: Converting circular structure to JSON
    at JSON.stringify (<anonymous>)
    at stringify (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:1119:12)
    at ServerResponse.json (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:260:14)
    at ServerResponse.send (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:158:21)
    at getArticle (/home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:193:9)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at /home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:281:22
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:354:14)
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:365:14)
    at Function.process_params (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:410:3)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:275:10)
    at Function.handle (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:174:3)
    at router (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:47:12)
[2018-01-31T16:01:59.514] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:02:02.569] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:02:02.574] [DEBUG] info - Query {
  _mongooseOptions: {},
  mongooseCollection: 
   NativeCollection {
     collection: Collection { s: [Object] },
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'article',
     collectionName: 'article',
     conn: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     queue: [],
     buffer: false,
     emitter: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: [Object], _posts: [Object] },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'article',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     discriminators: undefined,
     '$appliedMethods': true,
     getCatalogNameById: [Function],
     getTagNameById: [Function],
     saveContent: [Function],
     '$appliedHooks': true,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: {},
        singleNestedPaths: {},
        nested: {},
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: {},
        statics: [Object],
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: undefined,
        options: [Object],
        '$globalPluginsApplied': true,
        _requiredpaths: [],
        _indexedpaths: [] },
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     Query: { [Function] base: [Query] },
     '$__insertMany': [Function],
     insertMany: [Function],
     '$init': Promise { [Circular], catch: [Function] } },
  schema: 
   Schema {
     obj: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array] },
     paths: 
      { id: [SchemaString],
        title: [SchemaString],
        summary: [SchemaString],
        create_time: [SchemaNumber],
        modify_time: [SchemaNumber],
        catalog_id: [SchemaString],
        banner: [SchemaString],
        status: [SchemaNumber],
        tag_ids: [SchemaArray],
        _id: [ObjectId],
        __v: [SchemaNumber] },
     aliases: {},
     subpaths: {},
     virtuals: {},
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     statics: 
      { getCatalogNameById: [Function],
        getTagNameById: [Function],
        saveContent: [Function] },
     tree: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array],
        _id: [Object],
        __v: [Function: Number] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Kareem] },
     _userProvidedOptions: undefined,
     options: 
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     _requiredpaths: [],
     _indexedpaths: [] },
  op: 'find',
  options: {},
  _conditions: { id: 'e61943f0-0578-11e8-bba0-31b43b59290f' },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     collectionName: 'article' },
  _traceFunction: undefined }
[2018-01-31T16:02:02.593] [ERROR] info - TypeError: Converting circular structure to JSON
    at JSON.stringify (<anonymous>)
    at stringify (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:1119:12)
    at ServerResponse.json (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:260:14)
    at ServerResponse.send (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/response.js:158:21)
    at getArticle (/home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:193:9)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/layer.js:95:5)
    at /home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:281:22
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:354:14)
    at param (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:365:14)
    at Function.process_params (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:410:3)
    at next (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:275:10)
    at Function.handle (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:174:3)
    at router (/home/kk/code/VistudioCodeProjects/blog-backend/node_modules/express/lib/router/index.js:47:12)
[2018-01-31T16:02:52.488] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:03:05.591] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:03:05.597] [DEBUG] info - Query {
  _mongooseOptions: {},
  mongooseCollection: 
   NativeCollection {
     collection: Collection { s: [Object] },
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'article',
     collectionName: 'article',
     conn: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     queue: [],
     buffer: false,
     emitter: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: [Object], _posts: [Object] },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'article',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     discriminators: undefined,
     '$appliedMethods': true,
     getCatalogNameById: [Function],
     getTagNameById: [Function],
     saveContent: [Function],
     '$appliedHooks': true,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: {},
        singleNestedPaths: {},
        nested: {},
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: {},
        statics: [Object],
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: undefined,
        options: [Object],
        '$globalPluginsApplied': true,
        _requiredpaths: [],
        _indexedpaths: [] },
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     Query: { [Function] base: [Query] },
     '$__insertMany': [Function],
     insertMany: [Function],
     '$init': Promise { [Circular], catch: [Function] } },
  schema: 
   Schema {
     obj: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array] },
     paths: 
      { id: [SchemaString],
        title: [SchemaString],
        summary: [SchemaString],
        create_time: [SchemaNumber],
        modify_time: [SchemaNumber],
        catalog_id: [SchemaString],
        banner: [SchemaString],
        status: [SchemaNumber],
        tag_ids: [SchemaArray],
        _id: [ObjectId],
        __v: [SchemaNumber] },
     aliases: {},
     subpaths: {},
     virtuals: {},
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     statics: 
      { getCatalogNameById: [Function],
        getTagNameById: [Function],
        saveContent: [Function] },
     tree: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array],
        _id: [Object],
        __v: [Function: Number] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Kareem] },
     _userProvidedOptions: undefined,
     options: 
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     _requiredpaths: [],
     _indexedpaths: [] },
  op: 'find',
  options: {},
  _conditions: { id: 'e61943f0-0578-11e8-bba0-31b43b59290f' },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     collectionName: 'article' },
  _traceFunction: undefined }
[2018-01-31T16:05:35.544] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:05:38.591] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:05:38.598] [DEBUG] info - Query {
  _mongooseOptions: {},
  mongooseCollection: 
   NativeCollection {
     collection: Collection { s: [Object] },
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'article',
     collectionName: 'article',
     conn: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     queue: [],
     buffer: false,
     emitter: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: [Object], _posts: [Object] },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'article',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     discriminators: undefined,
     '$appliedMethods': true,
     getCatalogNameById: [Function],
     getTagNameById: [Function],
     saveContent: [Function],
     '$appliedHooks': true,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: {},
        singleNestedPaths: {},
        nested: {},
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: {},
        statics: [Object],
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: undefined,
        options: [Object],
        '$globalPluginsApplied': true,
        _requiredpaths: [],
        _indexedpaths: [] },
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     Query: { [Function] base: [Query] },
     '$__insertMany': [Function],
     insertMany: [Function],
     '$init': Promise { [Circular], catch: [Function] } },
  schema: 
   Schema {
     obj: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array] },
     paths: 
      { id: [SchemaString],
        title: [SchemaString],
        summary: [SchemaString],
        create_time: [SchemaNumber],
        modify_time: [SchemaNumber],
        catalog_id: [SchemaString],
        banner: [SchemaString],
        status: [SchemaNumber],
        tag_ids: [SchemaArray],
        _id: [ObjectId],
        __v: [SchemaNumber] },
     aliases: {},
     subpaths: {},
     virtuals: {},
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     statics: 
      { getCatalogNameById: [Function],
        getTagNameById: [Function],
        saveContent: [Function] },
     tree: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array],
        _id: [Object],
        __v: [Function: Number] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Kareem] },
     _userProvidedOptions: undefined,
     options: 
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     _requiredpaths: [],
     _indexedpaths: [] },
  op: 'findOne',
  options: {},
  _conditions: { id: 'e61943f0-0578-11e8-bba0-31b43b59290f' },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     collectionName: 'article' },
  _traceFunction: undefined,
  _error: null }
[2018-01-31T16:19:46.215] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:19:49.199] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:19:49.203] [DEBUG] info - Query {
  _mongooseOptions: {},
  mongooseCollection: 
   NativeCollection {
     collection: Collection { s: [Object] },
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'article',
     collectionName: 'article',
     conn: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     queue: [],
     buffer: false,
     emitter: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: [Object], _posts: [Object] },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'article',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'blog',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        '$initialConnection': [Promise],
        _events: [Object],
        _eventsCount: 2,
        db: [Db],
        client: [MongoClient] },
     discriminators: undefined,
     '$appliedMethods': true,
     getCatalogNameById: [Function],
     getTagNameById: [Function],
     saveContent: [Function],
     '$appliedHooks': true,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: {},
        singleNestedPaths: {},
        nested: {},
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: {},
        statics: [Object],
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: undefined,
        options: [Object],
        '$globalPluginsApplied': true,
        _requiredpaths: [],
        _indexedpaths: [] },
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     Query: { [Function] base: [Query] },
     '$__insertMany': [Function],
     insertMany: [Function],
     '$init': Promise { [Circular], catch: [Function] } },
  schema: 
   Schema {
     obj: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array] },
     paths: 
      { id: [SchemaString],
        title: [SchemaString],
        summary: [SchemaString],
        create_time: [SchemaNumber],
        modify_time: [SchemaNumber],
        catalog_id: [SchemaString],
        banner: [SchemaString],
        status: [SchemaNumber],
        tag_ids: [SchemaArray],
        _id: [ObjectId],
        __v: [SchemaNumber] },
     aliases: {},
     subpaths: {},
     virtuals: {},
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     statics: 
      { getCatalogNameById: [Function],
        getTagNameById: [Function],
        saveContent: [Function] },
     tree: 
      { id: [Function: String],
        title: [Function: String],
        summary: [Function: String],
        create_time: [Function: Number],
        modify_time: [Function: Number],
        catalog_id: [Function: String],
        banner: [Function: String],
        status: [Function: Number],
        tag_ids: [Function: Array],
        _id: [Object],
        __v: [Function: Number] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Kareem] },
     _userProvidedOptions: undefined,
     options: 
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     _requiredpaths: [],
     _indexedpaths: [] },
  op: 'findOne',
  options: {},
  _conditions: { id: /id/ },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'article',
        collectionName: 'article',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     collectionName: 'article' },
  _traceFunction: undefined,
  _error: null }
[2018-01-31T16:20:19.738] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:20:20.521] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:20:20.533] [DEBUG] info - null
[2018-01-31T16:20:35.890] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:20:36.757] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-01-31T16:20:36.762] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a6ffc47ab2cb5448bad6bfc,
  title: '55',
  summary: '666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517288519485,
  modify_time: 1517288519485,
  id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
  __v: 0 }
[2018-01-31T16:20:50.327] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:20:53.050] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:20:53.066] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T16:21:25.451] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:21:27.312] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:21:27.324] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T16:24:09.363] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:25:28.240] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:25:30.830] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:25:30.839] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T16:26:28.391] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:26:32.861] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:26:36.025] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:26:37.824] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:26:37.832] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T16:28:35.499] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:28:39.102] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:28:40.191] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:28:40.199] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T16:33:15.847] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:33:17.665] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:33:17.678] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T16:34:33.620] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:34:53.331] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:34:54.204] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-01-31T16:34:54.210] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a6ffc47ab2cb5448bad6bfc,
  title: '55',
  summary: '666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517288519485,
  modify_time: 1517288519485,
  id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
  __v: 0 }
[2018-01-31T16:36:59.007] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:37:13.030] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:37:17.525] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:37:17.532] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T16:38:36.336] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:38:38.119] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:38:38.131] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T16:39:03.441] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:39:04.851] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-01-31T16:39:04.858] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a6ffc47ab2cb5448bad6bfc,
  title: '55',
  summary: '666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517288519485,
  modify_time: 1517288519485,
  id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
  __v: 0 }
[2018-01-31T16:45:04.083] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:45:09.675] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-31T16:45:09.676] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-31T16:45:09.726] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_32287a8921daefdb61ec41eca23496d9',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-31T08:45:09.726Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_32287a8921daefdb61ec41eca23496d9',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-31T16:49:21.790] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:49:27.142] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-31T16:49:27.146] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-31T16:49:27.170] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_6cea0ab4b76d7471ee45d1d26b5f69ff',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-31T08:49:27.169Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_6cea0ab4b76d7471ee45d1d26b5f69ff',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-31T16:55:09.347] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:55:39.041] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T16:55:49.420] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T16:55:49.427] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T17:08:57.665] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a700fb4bcc628525dfbfce6,
       title: 'rr',
       summary: 'rr  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 1,
       create_time: 1517293492009,
       modify_time: 1517293492009,
       id: '479e18a0-0586-11e8-97ff-af31ba9d4662',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:08:58.989] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T17:08:58.997] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T17:09:25.412] [DEBUG] info - article-id: 479e18a0-0586-11e8-97ff-af31ba9d4662
[2018-01-31T17:09:25.455] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-31T17:09:35.223] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-31T17:09:35.224] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-31T17:09:35.235] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_d4848e02906020c15e76780b569849b2',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-31T09:09:35.235Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_d4848e02906020c15e76780b569849b2',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-31T17:09:42.968] [INFO] info - { content: 'sdfaf ',
  title: 'aaa',
  summary: 'sdfaf  ',
  banner: 'http://127.0.0.1:9528/upload/74e4c260-0666-11e8-afe6-b52dbac47e22.jpg',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: '5a6ff940bd0d203dcf7f20f3',
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T17:10:17.352] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-01-31T17:10:28.436] [INFO] info - { content: 'asdf',
  title: 'asas',
  summary: 'asdf  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60c',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ] }
[2018-01-31T17:10:28.486] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a718804c714823b80127058,
  title: 'asas',
  summary: 'asdf  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60c',
  status: 2,
  create_time: 1517389828438,
  modify_time: 1517389828438,
  id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
  __v: 0 }
[2018-01-31T17:10:28.543] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:10:37.202] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-31T17:10:37.203] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-31T17:10:37.222] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_c99549255791c503ea2dd60977173a07',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-31T09:10:37.221Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_c99549255791c503ea2dd60977173a07',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-01-31T17:10:44.990] [INFO] info - { content: 'asdf',
  title: 'asas',
  summary: 'asdf  ',
  banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
  catalog_id: '5a67efe39521803bd7f3c60c',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ] }
[2018-01-31T17:10:45.003] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a718814c714823b8012705a,
  title: 'asas',
  summary: 'asdf  ',
  banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
  catalog_id: '5a67efe39521803bd7f3c60c',
  status: 2,
  create_time: 1517389844993,
  modify_time: 1517389844993,
  id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
  __v: 0 }
[2018-01-31T17:10:45.065] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:10:47.444] [DEBUG] info - 9e788710-0666-11e8-9c6e-dd1992f972b9
[2018-01-31T17:10:47.454] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a718814c714823b8012705a,
  title: 'asas',
  summary: 'asdf  ',
  banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
  catalog_id: '5a67efe39521803bd7f3c60c',
  status: 2,
  create_time: 1517389844993,
  modify_time: 1517389844993,
  id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
  __v: 0 }
[2018-01-31T17:10:58.142] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-01-31T17:10:58.143] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-01-31T17:10:58.151] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 267649,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_bd334dae1a7f7561a92d1a623d0a62bb',
     name: 'timg (10).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-01-31T09:10:58.151Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_bd334dae1a7f7561a92d1a623d0a62bb',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 267649,
        closed: true } } }
[2018-01-31T17:20:12.962] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:20:21.735] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:26:44.053] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T17:26:44.060] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T17:26:46.641] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-01-31T17:26:46.648] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a6ffc47ab2cb5448bad6bfc,
  title: '55',
  summary: '666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517288519485,
  modify_time: 1517288519485,
  id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
  __v: 0 }
[2018-01-31T17:26:49.683] [DEBUG] info - 949a9670-0666-11e8-9c6e-dd1992f972b9
[2018-01-31T17:26:49.687] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a718804c714823b80127058,
  title: 'asas',
  summary: 'asdf  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60c',
  status: 2,
  create_time: 1517389828438,
  modify_time: 1517389828438,
  id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
  __v: 0 }
[2018-01-31T17:26:53.858] [DEBUG] info - 9e788710-0666-11e8-9c6e-dd1992f972b9
[2018-01-31T17:26:53.865] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a718814c714823b8012705a,
  title: 'asas',
  summary: 'asdf  ',
  banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
  catalog_id: '5a67efe39521803bd7f3c60c',
  status: 2,
  create_time: 1517389844993,
  modify_time: 1517389844993,
  id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
  __v: 0 }
[2018-01-31T17:47:23.443] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:47:30.546] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:47:33.352] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T17:47:33.359] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T17:47:46.894] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T17:47:46.906] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T17:49:16.796] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:49:21.460] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:49:24.757] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:49:26.834] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:49:32.337] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-01-31T17:49:34.314] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-01-31T17:49:34.323] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-01-31T17:49:51.048] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-01-31T17:49:51.059] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a6ffc47ab2cb5448bad6bfc,
  title: '55',
  summary: '666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517288519485,
  modify_time: 1517288519485,
  id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
  __v: 0 }
[2018-02-01T10:18:39.547] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T10:20:10.819] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T10:21:41.648] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718814c714823b8012705a,
       title: 'asas',
       summary: 'asdf  ',
       banner: 'http://127.0.0.1:9528/upload/99d7d5d0-0666-11e8-9c6e-dd1992f972b9.jpg',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389844993,
       modify_time: 1517389844993,
       id: '9e788710-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T10:21:45.348] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T10:21:45.354] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-02-01T10:23:35.588] [DEBUG] info - article-id: 9e788710-0666-11e8-9c6e-dd1992f972b9
[2018-02-01T10:23:35.628] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T10:26:53.097] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T10:27:09.431] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T10:27:11.754] [INFO] info - { status: 2 }
[2018-02-01T10:27:11.768] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-02-01T10:27:11.799] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T10:27:12.859] [INFO] info - { status: 1 }
[2018-02-01T10:27:12.869] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-02-01T10:27:12.928] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T10:50:33.934] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-02-01T10:50:33.944] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a6ffc47ab2cb5448bad6bfc,
  title: '55',
  summary: '666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517288519485,
  modify_time: 1517288519485,
  id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
  __v: 0 }
[2018-02-01T10:58:17.286] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T10:58:48.947] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T10:58:48.951] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-02-01T10:58:54.057] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-02-01T10:58:54.065] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a6ffc47ab2cb5448bad6bfc,
  title: '55',
  summary: '666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517288519485,
  modify_time: 1517288519485,
  id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
  __v: 0 }
[2018-02-01T10:59:21.128] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T10:59:21.132] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-02-01T11:00:37.332] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T11:00:41.652] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T11:06:51.795] [INFO] info - { content: 'admmmmmadmmmmmadmmmmm',
  title: 'admmmmm',
  summary: 'admmmmmadmmmmmadmmmmm  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ] }
[2018-02-01T11:06:51.845] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72844b2f8957251bb10d6d,
  title: 'admmmmm',
  summary: 'admmmmmadmmmmmadmmmmm  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517454411797,
  modify_time: 1517454411797,
  id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
  __v: 0 }
[2018-02-01T11:06:52.408] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72844b2f8957251bb10d6d,
       title: 'admmmmm',
       summary: 'admmmmmadmmmmmadmmmmm  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517454411797,
       modify_time: 1517454411797,
       id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T11:09:31.325] [DEBUG] info - f348f450-06fc-11e8-97da-cf6a363c1c48
[2018-02-01T11:09:31.328] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72844b2f8957251bb10d6d,
  title: 'admmmmm',
  summary: 'admmmmmadmmmmmadmmmmm  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517454411797,
  modify_time: 1517454411797,
  id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
  __v: 0 }
[2018-02-01T11:09:40.147] [DEBUG] info - f348f450-06fc-11e8-97da-cf6a363c1c48
[2018-02-01T11:09:40.156] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72844b2f8957251bb10d6d,
  title: 'admmmmm',
  summary: 'admmmmmadmmmmmadmmmmm  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517454411797,
  modify_time: 1517454411797,
  id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
  __v: 0 }
[2018-02-01T11:18:02.466] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T11:18:02.471] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-02-01T11:18:09.761] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T11:18:09.768] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0 }
[2018-02-01T11:55:25.522] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72844b2f8957251bb10d6d,
       title: 'admmmmm',
       summary: 'admmmmmadmmmmmadmmmmm  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517454411797,
       modify_time: 1517454411797,
       id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T11:58:57.025] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72844b2f8957251bb10d6d,
       title: 'admmmmm',
       summary: 'admmmmmadmmmmmadmmmmm  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517454411797,
       modify_time: 1517454411797,
       id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T11:59:01.641] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-02-01T11:59:01.658] [DEBUG] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
    _id: 5a6ffc47ab2cb5448bad6bfc,
    title: '55',
    summary: '666  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 2,
    create_time: 1517288519485,
    modify_time: 1517288519485,
    id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object] ] } ]
[2018-02-01T12:00:10.803] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72844b2f8957251bb10d6d,
       title: 'admmmmm',
       summary: 'admmmmmadmmmmmadmmmmm  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517454411797,
       modify_time: 1517454411797,
       id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T12:00:20.985] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T12:00:21.001] [DEBUG] info - [ { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
    _id: 5a6ff940bd0d203dcf7f20f3,
    title: '123',
    summary: '123213  ',
    banner: '',
    catalog_id: '5a67efe39521803bd7f3c60b',
    status: 1,
    create_time: 1517287744943,
    modify_time: 1517287744943,
    id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
    __v: 0,
    catalog_name: '生活感悟',
    tags: [ [Object] ] } ]
[2018-02-01T13:18:58.027] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72844b2f8957251bb10d6d,
       title: 'admmmmm',
       summary: 'admmmmmadmmmmmadmmmmm  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517454411797,
       modify_time: 1517454411797,
       id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T13:19:02.923] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T13:20:02.736] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72844b2f8957251bb10d6d,
       title: 'admmmmm',
       summary: 'admmmmmadmmmmmadmmmmm  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517454411797,
       modify_time: 1517454411797,
       id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T13:20:08.077] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-02-01T13:21:43.022] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72844b2f8957251bb10d6d,
       title: 'admmmmm',
       summary: 'admmmmmadmmmmmadmmmmm  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517454411797,
       modify_time: 1517454411797,
       id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T13:21:47.183] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T13:21:47.204] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fc', name: '工程化' } ] }
[2018-02-01T13:21:47.205] [DEBUG] info - null
[2018-02-01T13:22:47.419] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72844b2f8957251bb10d6d,
       title: 'admmmmm',
       summary: 'admmmmmadmmmmmadmmmmm  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517454411797,
       modify_time: 1517454411797,
       id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T13:22:51.539] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T13:22:51.550] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fc', name: '工程化' } ] }
[2018-02-01T13:22:51.551] [DEBUG] info - null
[2018-02-01T13:24:40.769] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72844b2f8957251bb10d6d,
       title: 'admmmmm',
       summary: 'admmmmmadmmmmmadmmmmm  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517454411797,
       modify_time: 1517454411797,
       id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T13:24:43.675] [DEBUG] info - e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T13:24:43.696] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a6ff940bd0d203dcf7f20f3,
  title: '123',
  summary: '123213  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517287744943,
  modify_time: 1517287744943,
  id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fc', name: '工程化' } ] }
[2018-02-01T13:24:43.701] [DEBUG] info - []
[2018-02-01T13:25:07.313] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72844b2f8957251bb10d6d,
       title: 'admmmmm',
       summary: 'admmmmmadmmmmmadmmmmm  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517454411797,
       modify_time: 1517454411797,
       id: 'f348f450-06fc-11e8-97da-cf6a363c1c48',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T13:25:11.321] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-02-01T13:25:11.346] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a6ffc47ab2cb5448bad6bfc,
  title: '55',
  summary: '666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517288519485,
  modify_time: 1517288519485,
  id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T13:25:11.350] [DEBUG] info - []
[2018-02-01T13:25:36.490] [DEBUG] info - article-id: f348f450-06fc-11e8-97da-cf6a363c1c48
[2018-02-01T13:25:36.545] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ff940bd0d203dcf7f20f3,
       title: '123',
       summary: '123213  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517287744943,
       modify_time: 1517287744943,
       id: 'e61943f0-0578-11e8-bba0-31b43b59290f',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T13:25:41.212] [DEBUG] info - article-id: e61943f0-0578-11e8-bba0-31b43b59290f
[2018-02-01T13:25:41.253] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] } ] }
[2018-02-01T13:25:56.007] [INFO] info - { content: '666666666666',
  title: '啊啊',
  summary: '666666666666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ] }
[2018-02-01T13:25:56.078] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72a4e452b03c7daa65b8b8,
  title: '啊啊',
  summary: '666666666666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517462756008,
  modify_time: 1517462756008,
  id: '60d28280-0710-11e8-95b2-53e7071d335d',
  __v: 0 }
[2018-02-01T13:25:56.563] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72a4e452b03c7daa65b8b8,
       title: '啊啊',
       summary: '666666666666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517462756008,
       modify_time: 1517462756008,
       id: '60d28280-0710-11e8-95b2-53e7071d335d',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T13:26:02.253] [DEBUG] info - 60d28280-0710-11e8-95b2-53e7071d335d
[2018-02-01T13:26:02.268] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72a4e452b03c7daa65b8b8,
  title: '啊啊',
  summary: '666666666666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517462756008,
  modify_time: 1517462756008,
  id: '60d28280-0710-11e8-95b2-53e7071d335d',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T13:26:02.269] [DEBUG] info - [ { _id: 5a72a4e452b03c7daa65b8b9,
    content: '666666666666',
    article_id: '60d28280-0710-11e8-95b2-53e7071d335d',
    __v: 0 } ]
[2018-02-01T13:26:23.818] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a718804c714823b80127058,
       title: 'asas',
       summary: 'asdf  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60c',
       status: 2,
       create_time: 1517389828438,
       modify_time: 1517389828438,
       id: '949a9670-0666-11e8-9c6e-dd1992f972b9',
       __v: 0,
       catalog_name: '创业与经济',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72a4e452b03c7daa65b8b8,
       title: '啊啊',
       summary: '666666666666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517462756008,
       modify_time: 1517462756008,
       id: '60d28280-0710-11e8-95b2-53e7071d335d',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T13:26:26.003] [DEBUG] info - 60d28280-0710-11e8-95b2-53e7071d335d
[2018-02-01T13:26:26.016] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72a4e452b03c7daa65b8b8,
  title: '啊啊',
  summary: '666666666666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517462756008,
  modify_time: 1517462756008,
  id: '60d28280-0710-11e8-95b2-53e7071d335d',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T13:26:26.021] [DEBUG] info - { _id: 5a72a4e452b03c7daa65b8b9,
  content: '666666666666',
  article_id: '60d28280-0710-11e8-95b2-53e7071d335d',
  __v: 0 }
[2018-02-01T16:39:08.472] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-02-01T16:39:08.484] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a6ffc47ab2cb5448bad6bfc,
  title: '55',
  summary: '666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517288519485,
  modify_time: 1517288519485,
  id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T16:39:08.488] [DEBUG] info - null
[2018-02-01T16:50:06.363] [DEBUG] info - b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-02-01T16:50:06.372] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a6ffc47ab2cb5448bad6bfc,
  title: '55',
  summary: '666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517288519485,
  modify_time: 1517288519485,
  id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T16:50:06.375] [DEBUG] info - null
[2018-02-01T16:50:28.242] [DEBUG] info - 60d28280-0710-11e8-95b2-53e7071d335d
[2018-02-01T16:50:28.254] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72a4e452b03c7daa65b8b8,
  title: '啊啊',
  summary: '666666666666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517462756008,
  modify_time: 1517462756008,
  id: '60d28280-0710-11e8-95b2-53e7071d335d',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T16:50:28.259] [DEBUG] info - { _id: 5a72a4e452b03c7daa65b8b9,
  content: '666666666666',
  article_id: '60d28280-0710-11e8-95b2-53e7071d335d',
  __v: 0 }
[2018-02-01T16:50:34.673] [DEBUG] info - article-id: 949a9670-0666-11e8-9c6e-dd1992f972b9
[2018-02-01T16:50:34.715] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a6ffc47ab2cb5448bad6bfc,
       title: '55',
       summary: '666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517288519485,
       modify_time: 1517288519485,
       id: 'b3c325e0-057a-11e8-818e-0ddbcc6ea079',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72a4e452b03c7daa65b8b8,
       title: '啊啊',
       summary: '666666666666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517462756008,
       modify_time: 1517462756008,
       id: '60d28280-0710-11e8-95b2-53e7071d335d',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T16:50:37.359] [DEBUG] info - article-id: b3c325e0-057a-11e8-818e-0ddbcc6ea079
[2018-02-01T16:50:37.395] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72a4e452b03c7daa65b8b8,
       title: '啊啊',
       summary: '666666666666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517462756008,
       modify_time: 1517462756008,
       id: '60d28280-0710-11e8-95b2-53e7071d335d',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T16:51:24.052] [DEBUG] info - article-id: 60d28280-0710-11e8-95b2-53e7071d335d
[2018-02-01T16:51:24.084] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-02-01T16:51:33.462] [INFO] info - { content: '6666',
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ] }
[2018-02-01T16:51:33.565] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0 }
[2018-02-01T16:51:34.124] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T16:52:51.603] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T16:52:51.617] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T16:52:51.620] [DEBUG] info - { _id: 5a72d515a1f74e7e8f92950e,
  content: '6666',
  article_id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0 }
[2018-02-01T16:54:38.779] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T16:54:43.051] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T16:54:43.075] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T16:55:26.089] [INFO] info - { content: '# t\n**好啊啊**\n*爱的*',
  title: '好啊好啊',
  summary: 't 好啊啊 爱的  ',
  banner: '',
  catalog_id: null,
  status: 2,
  tag_ids: [] }
[2018-02-01T16:55:26.147] [INFO] info - { tag_ids: [],
  _id: 5a72d5fe4bf65350b8f43b04,
  title: '好啊好啊',
  summary: 't 好啊啊 爱的  ',
  banner: '',
  catalog_id: null,
  status: 2,
  create_time: 1517475326090,
  modify_time: 1517475326090,
  id: 'a52ccea0-072d-11e8-9175-ededd0db7fe5',
  __v: 0 }
[2018-02-01T16:55:26.696] [ERROR] info - TypeError: Cannot read property 'name' of undefined
    at /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:123:37
    at Generator.next (<anonymous>)
    at step (/home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:27:191)
    at /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:27:361
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)
[2018-02-01T16:55:37.990] [ERROR] info - TypeError: Cannot read property 'name' of undefined
    at /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:123:37
    at Generator.next (<anonymous>)
    at step (/home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:27:191)
    at /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:27:361
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)
[2018-02-01T16:56:23.319] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T16:57:17.806] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T16:57:17.831] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T16:58:24.753] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-02-01T16:58:24.755] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-02-01T16:58:24.787] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_018e3fbabf60cd9fc2f6e1e830da39ac',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-02-01T08:58:24.786Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_018e3fbabf60cd9fc2f6e1e830da39ac',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-02-01T16:58:28.719] [INFO] info - { content: '6666',
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: 'http://127.0.0.1:9528/upload/0fb0dfa0-072e-11e8-adad-b927a4151487.jpg',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: '5a72d515a1f74e7e8f92950d',
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T16:59:08.166] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T16:59:12.977] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-02-01T16:59:12.980] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-02-01T16:59:13.005] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_d794a3e2d8a4e2e69f87942db1d84f0f',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-02-01T08:59:13.004Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_d794a3e2d8a4e2e69f87942db1d84f0f',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-02-01T16:59:21.597] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T16:59:21.609] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T16:59:44.014] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-02-01T16:59:44.018] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-02-01T16:59:44.061] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_f24fd02cab4d9140edfeb8362aedba71',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-02-01T08:59:44.061Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_f24fd02cab4d9140edfeb8362aedba71',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-02-01T16:59:48.286] [INFO] info - { content: '6666',
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: 'http://127.0.0.1:9528/upload/3ef08400-072e-11e8-a164-d7ce373c021c.jpg',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: '5a72d515a1f74e7e8f92950d',
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T17:02:49.842] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:02:59.706] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:02:59.721] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:05:50.684] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:05:50.764] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:05:59.942] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:05:59.954] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:06:21.379] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:06:21.390] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:08:37.382] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:09:56.906] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:11:12.384] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:11:17.808] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:11:44.654] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:12:15.922] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:12:21.994] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:12:22.009] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:13:25.212] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:13:27.665] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:14:00.824] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:14:00.838] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:15:26.823] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:15:26.831] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:15:31.906] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:15:31.919] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:15:52.094] [INFO] info - { status: 1 }
[2018-02-01T17:15:52.125] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-02-01T17:15:52.161] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:15:53.756] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:15:53.782] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:16:07.563] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:16:07.578] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:16:17.342] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:16:17.350] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 1,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:16:18.780] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:16:56.534] [INFO] info - { status: 2 }
[2018-02-01T17:16:56.541] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-02-01T17:16:56.559] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:17:11.927] [INFO] info - { status: 1 }
[2018-02-01T17:17:11.934] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-02-01T17:17:11.953] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 1,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:17:35.308] [INFO] info - { status: 2 }
[2018-02-01T17:17:35.315] [DEBUG] info - { ok: 1, nModified: 1, n: 1 }
[2018-02-01T17:17:35.344] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:17:47.858] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:17:47.871] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:22:29.116] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:22:30.653] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:23:00.084] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:23:02.473] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:24:28.140] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:41:04.546] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:41:08.550] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:41:08.567] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:43:25.328] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:43:29.409] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:43:29.421] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:45:18.961] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:45:22.944] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:45:22.969] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:45:51.374] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎',
       summary: '6666  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517475093464,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:45:53.482] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:45:53.499] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎',
  summary: '6666  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:46:00.815] [INFO] info - fields { content: '66667',
  title: '啊嘎嘎2',
  summary: '66667  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: '5a72d515a1f74e7e8f92950d',
  create_time: 1517475093464,
  modify_time: 1517475093464,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T17:46:00.845] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-02-01T17:46:01.213] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎2',
       summary: '66667  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478360820,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:46:20.321] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:46:20.333] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎2',
  summary: '66667  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517478360820,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:46:29.656] [INFO] info - fields { content: '666677',
  title: '啊嘎嘎21',
  summary: '666677  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: '5a72d515a1f74e7e8f92950d',
  create_time: 1517475093464,
  modify_time: 1517478360820,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T17:46:29.662] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-02-01T17:46:30.091] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: '666677  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478389657,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:47:17.047] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:47:17.056] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎21',
  summary: '666677  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517478389657,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:53:11.744] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: '666677  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478389657,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:53:15.749] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:53:15.760] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎21',
  summary: '666677  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517478389657,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '6666' }
[2018-02-01T17:53:31.721] [INFO] info - fields { content: 'ddd',
  title: '啊嘎嘎21',
  summary: 'ddd  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: '5a72d515a1f74e7e8f92950d',
  create_time: 1517475093464,
  modify_time: 1517478389657,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T17:53:31.737] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-02-01T17:53:32.167] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478811723,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:53:34.107] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:53:34.117] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎21',
  summary: 'ddd  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517478811723,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: 'ddd' }
[2018-02-01T17:53:46.184] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-02-01T17:53:46.186] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-02-01T17:53:46.217] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_48db16cab1e27c834d260277a2235784',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-02-01T09:53:46.216Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_48db16cab1e27c834d260277a2235784',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-02-01T17:53:50.037] [INFO] info - fields { content: 'ddd',
  title: '啊嘎嘎21',
  summary: 'ddd  ',
  banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: '5a72d515a1f74e7e8f92950d',
  create_time: 1517475093464,
  modify_time: 1517478811723,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T17:53:50.050] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-02-01T17:53:50.467] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478830042,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:53:51.918] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T17:53:51.929] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎21',
  summary: 'ddd  ',
  banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517478830042,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: 'ddd' }
[2018-02-01T17:53:54.562] [INFO] info - fields { content: 'ddd',
  title: '啊嘎嘎21',
  summary: 'ddd  ',
  banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: '5a72d515a1f74e7e8f92950d',
  create_time: 1517475093464,
  modify_time: 1517478830042,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T17:53:54.566] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-02-01T17:53:54.899] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:56:35.869] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:56:40.960] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:58:23.008] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:58:28.435] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T17:58:33.693] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:01:26.429] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:02:18.173] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:02:31.792] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:03:24.481] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:04:21.417] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:04:24.940] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:04:50.671] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:11:06.569] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:12:01.576] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:12:13.840] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:12:29.479] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-02-01T18:12:29.481] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-02-01T18:12:29.522] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_e9d0d887a918813e7398a1e67f83b35b',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-02-01T10:12:29.521Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_e9d0d887a918813e7398a1e67f83b35b',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-02-01T18:12:30.980] [INFO] info - { content: 'asdF',
  title: '324',
  summary: 'asdF  ',
  banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ] }
[2018-02-01T18:12:31.229] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72e80f215de367f0f4ff67,
  title: '324',
  summary: 'asdF  ',
  banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  create_time: 1517479950981,
  modify_time: 1517479950981,
  id: '69d32b50-0738-11e8-af59-ff604c3235ef',
  __v: 0 }
[2018-02-01T18:12:31.293] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72e80f215de367f0f4ff67,
       title: '324',
       summary: 'asdF  ',
       banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517479950981,
       modify_time: 1517479950981,
       id: '69d32b50-0738-11e8-af59-ff604c3235ef',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-01T18:12:34.157] [DEBUG] info - 69d32b50-0738-11e8-af59-ff604c3235ef
[2018-02-01T18:12:34.171] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72e80f215de367f0f4ff67,
  title: '324',
  summary: 'asdF  ',
  banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  create_time: 1517479950981,
  modify_time: 1517479950981,
  id: '69d32b50-0738-11e8-af59-ff604c3235ef',
  __v: 0,
  catalog_name: '大前端',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: 'asdF' }
[2018-02-01T18:12:39.540] [INFO] info - fields { content: 'asdF33',
  title: '32433',
  summary: 'asdF33  ',
  banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: '5a72e80f215de367f0f4ff67',
  create_time: 1517479950981,
  modify_time: 1517479950981,
  id: '69d32b50-0738-11e8-af59-ff604c3235ef',
  __v: 0,
  catalog_name: '大前端',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-01T18:12:39.551] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-02-01T18:12:39.610] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72e80f215de367f0f4ff67,
       title: '32433',
       summary: 'asdF33  ',
       banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517479950981,
       modify_time: 1517479959542,
       id: '69d32b50-0738-11e8-af59-ff604c3235ef',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-01T18:12:41.856] [DEBUG] info - 69d32b50-0738-11e8-af59-ff604c3235ef
[2018-02-01T18:12:41.864] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72e80f215de367f0f4ff67,
  title: '32433',
  summary: 'asdF33  ',
  banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  create_time: 1517479950981,
  modify_time: 1517479959542,
  id: '69d32b50-0738-11e8-af59-ff604c3235ef',
  __v: 0,
  catalog_name: '大前端',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: 'asdF33' }
[2018-02-01T18:12:46.514] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T18:12:46.525] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎21',
  summary: 'ddd  ',
  banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517478834564,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: 'ddd' }
[2018-02-01T18:14:08.704] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72e80f215de367f0f4ff67,
       title: '32433',
       summary: 'asdF33  ',
       banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517479950981,
       modify_time: 1517479959542,
       id: '69d32b50-0738-11e8-af59-ff604c3235ef',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-01T18:14:10.922] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72e80f215de367f0f4ff67,
       title: '32433',
       summary: 'asdF33  ',
       banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517479950981,
       modify_time: 1517479959542,
       id: '69d32b50-0738-11e8-af59-ff604c3235ef',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-01T18:14:13.355] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72e80f215de367f0f4ff67,
       title: '32433',
       summary: 'asdF33  ',
       banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517479950981,
       modify_time: 1517479959542,
       id: '69d32b50-0738-11e8-af59-ff604c3235ef',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-01T18:43:09.808] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a72e80f215de367f0f4ff67,
       title: '32433',
       summary: 'asdF33  ',
       banner: 'http://127.0.0.1:9528/upload/68f54e70-0738-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517479950981,
       modify_time: 1517479959542,
       id: '69d32b50-0738-11e8-af59-ff604c3235ef',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-01T18:43:16.920] [DEBUG] info - article-id: 69d32b50-0738-11e8-af59-ff604c3235ef
[2018-02-01T18:43:16.955] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72d515a1f74e7e8f92950d,
       title: '啊嘎嘎21',
       summary: 'ddd  ',
       banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517475093464,
       modify_time: 1517478834564,
       id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:43:45.438] [DEBUG] info - 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T18:43:45.453] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72d515a1f74e7e8f92950d,
  title: '啊嘎嘎21',
  summary: 'ddd  ',
  banner: 'http://127.0.0.1:9528/upload/cb6f99f0-0735-11e8-af59-ff604c3235ef.jpg',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517475093464,
  modify_time: 1517478834564,
  id: '1a850c90-072d-11e8-93b2-8b19c0a9b49c',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: 'ddd' }
[2018-02-01T18:44:07.270] [DEBUG] info - article-id: 1a850c90-072d-11e8-93b2-8b19c0a9b49c
[2018-02-01T18:44:07.306] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-02-01T18:44:25.956] [INFO] info - { content: '123132132',
  title: '123',
  summary: '123132132  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ] }
[2018-02-01T18:44:26.011] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72ef89072b3f7572078398,
  title: '123',
  summary: '123132132  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517481865958,
  modify_time: 1517481865958,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0 }
[2018-02-01T18:44:26.063] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-01T18:53:58.246] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T10:24:48.483] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T13:40:59.857] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T13:41:50.379] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T13:41:58.337] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T13:42:01.627] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T13:42:03.978] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T13:42:12.753] [DEBUG] info - df3d7860-073c-11e8-ad2a-872e8a04125b
[2018-02-02T13:42:12.768] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72ef89072b3f7572078398,
  title: '123',
  summary: '123132132  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517481865958,
  modify_time: 1517481865958,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '123132132' }
[2018-02-02T13:42:33.218] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T13:47:55.367] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T13:58:59.543] [INFO] info - {}
[2018-02-02T14:00:31.941] [INFO] info - { name: '12', description: '34', sort: 0 }
[2018-02-02T14:02:31.944] [INFO] info - { name: '12', description: '34', sort: 0 }
[2018-02-02T14:35:38.614] [INFO] info - { name: '12', description: '34', sort: 0 }
[2018-02-02T14:37:38.615] [INFO] info - { name: '12', description: '34', sort: 0 }
[2018-02-02T14:39:37.867] [INFO] info - { name: '12', des: '', description: '34' }
[2018-02-02T14:40:15.714] [INFO] info - { name: '5', des: '6' }
[2018-02-02T14:42:15.719] [INFO] info - { name: '5', des: '6' }
[2018-02-02T14:43:53.791] [INFO] info - { name: '33', des: '44' }
[2018-02-02T14:54:58.944] [INFO] info - { name: '22', des: '33' }
[2018-02-02T14:55:15.152] [INFO] info - { name: '77', des: '88' }
[2018-02-02T14:56:57.887] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T14:57:02.865] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T14:57:18.688] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T15:03:02.656] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T15:04:09.586] [INFO] info - { name: 'aa', des: 'dd' }
[2018-02-02T15:07:53.009] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T15:08:03.513] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T15:08:42.239] [INFO] info - { name: 'd', des: '2' }
[2018-02-02T15:30:34.152] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T15:30:36.905] [DEBUG] info - df3d7860-073c-11e8-ad2a-872e8a04125b
[2018-02-02T15:30:36.918] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72ef89072b3f7572078398,
  title: '123',
  summary: '123132132  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517481865958,
  modify_time: 1517481865958,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '123132132' }
[2018-02-02T15:30:43.958] [DEBUG] info - df3d7860-073c-11e8-ad2a-872e8a04125b
[2018-02-02T15:30:43.967] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72ef89072b3f7572078398,
  title: '123',
  summary: '123132132  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517481865958,
  modify_time: 1517481865958,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '123132132' }
[2018-02-02T15:42:13.187] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T15:42:13.193] [DEBUG] info - [ { _id: 5a67efe39521803bd7f3c60a,
    catalog_id: 1,
    name: '大前端',
    des: '前端相关',
    create_time: '1516785718652',
    modify_time: '1516785718652',
    __v: 0 } ]
[2018-02-02T15:43:31.327] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T15:43:31.337] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T15:46:07.040] [DEBUG] info - 5a7408a9a90e5649a50715e3
[2018-02-02T15:46:07.043] [DEBUG] info - { _id: 5a7408a9a90e5649a50715e3,
  name: '33',
  des: '44',
  create_time: '1517553833799',
  modify_time: '1517553833799',
  __v: 0 }
[2018-02-02T15:46:09.696] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T15:46:09.700] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T15:48:37.892] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T15:48:37.898] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T15:51:24.024] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T15:51:24.028] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T15:52:09.954] [DEBUG] info - 5a67efe39521803bd7f3c60b
[2018-02-02T15:52:09.958] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60b,
  catalog_id: 2,
  name: '生活感悟',
  des: '观点与感悟',
  create_time: '1516786740287',
  modify_time: '1516786740288',
  __v: 0 }
[2018-02-02T15:52:14.750] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T15:52:14.753] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T15:52:16.904] [DEBUG] info - 5a7408a9a90e5649a50715e3
[2018-02-02T15:52:16.911] [DEBUG] info - { _id: 5a7408a9a90e5649a50715e3,
  name: '33',
  des: '44',
  create_time: '1517553833799',
  modify_time: '1517553833799',
  __v: 0 }
[2018-02-02T16:07:54.182] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T16:07:54.190] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T16:07:59.049] [DEBUG] info - 5a67efe39521803bd7f3c60c
[2018-02-02T16:07:59.052] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60c,
  catalog_id: 3,
  name: '创业与经济',
  des: '创业与经济相关',
  create_time: '1230246540',
  modify_time: '1230246540',
  __v: 0 }
[2018-02-02T16:08:01.426] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T16:08:01.430] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T16:08:03.870] [DEBUG] info - 5a740e7aa90e5649a50715e7
[2018-02-02T16:08:03.874] [DEBUG] info - { _id: 5a740e7aa90e5649a50715e7,
  name: 'd',
  des: '2',
  create_time: '1517555322242',
  modify_time: '1517555322242',
  __v: 0 }
[2018-02-02T16:08:09.306] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T16:08:09.311] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T16:08:12.350] [DEBUG] info - 5a67efe39521803bd7f3c60b
[2018-02-02T16:08:12.356] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60b,
  catalog_id: 2,
  name: '生活感悟',
  des: '观点与感悟',
  create_time: '1516786740287',
  modify_time: '1516786740288',
  __v: 0 }
[2018-02-02T16:08:16.548] [DEBUG] info - 5a740b42a90e5649a50715e4
[2018-02-02T16:08:16.552] [DEBUG] info - { _id: 5a740b42a90e5649a50715e4,
  name: '22',
  des: '33',
  create_time: '1517554498947',
  modify_time: '1517554498947',
  __v: 0 }
[2018-02-02T16:08:19.319] [DEBUG] info - 5a740e7aa90e5649a50715e7
[2018-02-02T16:08:19.323] [DEBUG] info - { _id: 5a740e7aa90e5649a50715e7,
  name: 'd',
  des: '2',
  create_time: '1517555322242',
  modify_time: '1517555322242',
  __v: 0 }
[2018-02-02T16:08:25.281] [DEBUG] info - 5a7408a9a90e5649a50715e3
[2018-02-02T16:08:25.284] [DEBUG] info - { _id: 5a7408a9a90e5649a50715e3,
  name: '33',
  des: '44',
  create_time: '1517553833799',
  modify_time: '1517553833799',
  __v: 0 }
[2018-02-02T16:08:28.217] [DEBUG] info - 5a740b42a90e5649a50715e4
[2018-02-02T16:08:28.220] [DEBUG] info - { _id: 5a740b42a90e5649a50715e4,
  name: '22',
  des: '33',
  create_time: '1517554498947',
  modify_time: '1517554498947',
  __v: 0 }
[2018-02-02T16:08:34.298] [DEBUG] info - 5a67efe39521803bd7f3c60b
[2018-02-02T16:08:34.303] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60b,
  catalog_id: 2,
  name: '生活感悟',
  des: '观点与感悟',
  create_time: '1516786740287',
  modify_time: '1516786740288',
  __v: 0 }
[2018-02-02T16:08:36.586] [DEBUG] info - 5a67efe39521803bd7f3c60b
[2018-02-02T16:08:36.592] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60b,
  catalog_id: 2,
  name: '生活感悟',
  des: '观点与感悟',
  create_time: '1516786740287',
  modify_time: '1516786740288',
  __v: 0 }
[2018-02-02T16:08:38.698] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T16:08:38.709] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T16:08:40.838] [DEBUG] info - 5a740b53a90e5649a50715e5
[2018-02-02T16:08:40.843] [DEBUG] info - { _id: 5a740b53a90e5649a50715e5,
  name: '77',
  des: '88',
  create_time: '1517554515155',
  modify_time: '1517554515155',
  __v: 0 }
[2018-02-02T16:08:43.203] [DEBUG] info - 5a740e7aa90e5649a50715e7
[2018-02-02T16:08:43.208] [DEBUG] info - { _id: 5a740e7aa90e5649a50715e7,
  name: 'd',
  des: '2',
  create_time: '1517555322242',
  modify_time: '1517555322242',
  __v: 0 }
[2018-02-02T16:17:46.442] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T16:17:46.445] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T16:18:24.597] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T16:18:24.602] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T16:18:36.173] [DEBUG] info - 5a67efe39521803bd7f3c60c
[2018-02-02T16:18:36.180] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60c,
  catalog_id: 3,
  name: '创业与经济',
  des: '创业与经济相关',
  create_time: '1230246540',
  modify_time: '1230246540',
  __v: 0 }
[2018-02-02T16:18:42.819] [DEBUG] info - 5a740b53a90e5649a50715e5
[2018-02-02T16:18:42.823] [DEBUG] info - { _id: 5a740b53a90e5649a50715e5,
  name: '77',
  des: '88',
  create_time: '1517554515155',
  modify_time: '1517554515155',
  __v: 0 }
[2018-02-02T16:18:48.490] [DEBUG] info - 5a67efe39521803bd7f3c60c
[2018-02-02T16:18:48.494] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60c,
  catalog_id: 3,
  name: '创业与经济',
  des: '创业与经济相关',
  create_time: '1230246540',
  modify_time: '1230246540',
  __v: 0 }
[2018-02-02T16:18:50.663] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T16:18:50.667] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T16:18:56.552] [DEBUG] info - 5a7408a9a90e5649a50715e3
[2018-02-02T16:18:56.558] [DEBUG] info - { _id: 5a7408a9a90e5649a50715e3,
  name: '33',
  des: '44',
  create_time: '1517553833799',
  modify_time: '1517553833799',
  __v: 0 }
[2018-02-02T16:21:31.515] [DEBUG] info - 5a67efe39521803bd7f3c60c
[2018-02-02T16:21:31.520] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60c,
  catalog_id: 3,
  name: '创业与经济',
  des: '创业与经济相关',
  create_time: '1230246540',
  modify_time: '1230246540',
  __v: 0 }
[2018-02-02T16:21:38.753] [DEBUG] info - 5a740b53a90e5649a50715e5
[2018-02-02T16:21:38.760] [DEBUG] info - { _id: 5a740b53a90e5649a50715e5,
  name: '77',
  des: '88',
  create_time: '1517554515155',
  modify_time: '1517554515155',
  __v: 0 }
[2018-02-02T16:22:11.118] [DEBUG] info - 5a67efe39521803bd7f3c60b
[2018-02-02T16:22:11.125] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60b,
  catalog_id: 2,
  name: '生活感悟',
  des: '观点与感悟',
  create_time: '1516786740287',
  modify_time: '1516786740288',
  __v: 0 }
[2018-02-02T16:22:13.822] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T16:22:17.911] [DEBUG] info - df3d7860-073c-11e8-ad2a-872e8a04125b
[2018-02-02T16:22:17.925] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72ef89072b3f7572078398,
  title: '123',
  summary: '123132132  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517481865958,
  modify_time: 1517481865958,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '123132132' }
[2018-02-02T16:22:25.610] [DEBUG] info - df3d7860-073c-11e8-ad2a-872e8a04125b
[2018-02-02T16:22:25.628] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72ef89072b3f7572078398,
  title: '123',
  summary: '123132132  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517481865958,
  modify_time: 1517481865958,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '123132132' }
[2018-02-02T16:22:35.395] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T16:22:38.143] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T16:22:47.180] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T16:22:47.186] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T16:22:49.622] [DEBUG] info - 5a67efe39521803bd7f3c60c
[2018-02-02T16:22:49.624] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60c,
  catalog_id: 3,
  name: '创业与经济',
  des: '创业与经济相关',
  create_time: '1230246540',
  modify_time: '1230246540',
  __v: 0 }
[2018-02-02T16:23:02.088] [DEBUG] info - 5a7408a9a90e5649a50715e3
[2018-02-02T16:23:02.090] [DEBUG] info - { _id: 5a7408a9a90e5649a50715e3,
  name: '33',
  des: '44',
  create_time: '1517553833799',
  modify_time: '1517553833799',
  __v: 0 }
[2018-02-02T16:34:14.330] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '123',
       summary: '123132132  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517481865958,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T16:34:16.851] [DEBUG] info - df3d7860-073c-11e8-ad2a-872e8a04125b
[2018-02-02T16:34:16.871] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72ef89072b3f7572078398,
  title: '123',
  summary: '123132132  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517481865958,
  modify_time: 1517481865958,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '123132132' }
[2018-02-02T16:34:22.482] [INFO] info - fields { content: '1231321324',
  title: '1234',
  summary: '1231321324  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: '5a72ef89072b3f7572078398',
  create_time: 1517481865958,
  modify_time: 1517481865958,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ] }
[2018-02-02T16:34:22.512] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-02-02T16:34:25.804] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T16:34:31.106] [DEBUG] info - df3d7860-073c-11e8-ad2a-872e8a04125b
[2018-02-02T16:34:31.121] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72ef89072b3f7572078398,
  title: '1234',
  summary: '1231321324  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517481865958,
  modify_time: 1517560462484,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '1231321324' }
[2018-02-02T16:34:38.577] [DEBUG] info - df3d7860-073c-11e8-ad2a-872e8a04125b
[2018-02-02T16:34:38.608] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72ef89072b3f7572078398,
  title: '1234',
  summary: '1231321324  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517481865958,
  modify_time: 1517560462484,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '1231321324' }
[2018-02-02T16:34:47.757] [INFO] info - { content: '',
  title: '',
  summary: '',
  banner: '',
  catalog_id: null,
  status: 2,
  tag_ids: [] }
[2018-02-02T16:34:47.928] [INFO] info - { tag_ids: [],
  _id: 5a7422a7b855c97a9b00f2e4,
  title: '',
  summary: '',
  banner: '',
  catalog_id: null,
  status: 2,
  create_time: 1517560487760,
  modify_time: 1517560487760,
  id: 'ed7c6500-07f3-11e8-abad-8b7b74c236cb',
  __v: 0 }
[2018-02-02T16:34:50.837] [ERROR] info - TypeError: Cannot read property 'name' of undefined
    at /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:123:37
    at Generator.next (<anonymous>)
    at step (/home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:27:191)
    at /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:27:361
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)
[2018-02-02T16:35:02.074] [ERROR] info - TypeError: Cannot read property 'name' of undefined
    at /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:123:37
    at Generator.next (<anonymous>)
    at step (/home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:27:191)
    at /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1/article.js:27:361
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)
[2018-02-02T16:35:33.872] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T16:36:09.378] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T16:37:29.503] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T16:37:29.506] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T16:37:32.111] [DEBUG] info - 5a740e7aa90e5649a50715e7
[2018-02-02T16:37:32.115] [DEBUG] info - { _id: 5a740e7aa90e5649a50715e7,
  name: 'd',
  des: '2',
  create_time: '1517555322242',
  modify_time: '1517555322242',
  __v: 0 }
[2018-02-02T16:38:50.567] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-02T16:38:50.578] [DEBUG] info - { _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 0 }
[2018-02-02T16:38:52.938] [DEBUG] info - 5a740e7aa90e5649a50715e7
[2018-02-02T16:38:52.943] [DEBUG] info - { _id: 5a740e7aa90e5649a50715e7,
  name: 'd',
  des: '2',
  create_time: '1517555322242',
  modify_time: '1517555322242',
  __v: 0 }
[2018-02-02T16:38:55.462] [INFO] info - fields { name: 'd1',
  des: '2',
  _id: '5a740e7aa90e5649a50715e7',
  catalog_id: '',
  create_time: '1517555322242',
  modify_time: '1517555322242',
  __v: 0 }
[2018-02-02T16:40:19.130] [DEBUG] info - 5a740e7aa90e5649a50715e7
[2018-02-02T16:40:19.138] [DEBUG] info - { _id: 5a740e7aa90e5649a50715e7,
  name: 'd',
  des: '2',
  create_time: '1517555322242',
  modify_time: '1517555322242',
  __v: 0 }
[2018-02-02T16:40:23.374] [INFO] info - fields { name: 'd2',
  des: '22',
  _id: '5a740e7aa90e5649a50715e7',
  create_time: '1517555322242',
  modify_time: '1517555322242',
  __v: 0 }
[2018-02-02T16:40:23.385] [INFO] info - ret { ok: 1, nModified: 0, n: 0 }
[2018-02-02T16:45:38.946] [DEBUG] info - 5a740e7aa90e5649a50715e7
[2018-02-02T16:45:38.957] [DEBUG] info - { _id: 5a740e7aa90e5649a50715e7,
  name: 'd',
  des: '2',
  create_time: '1517555322242',
  modify_time: '1517555322242',
  __v: 0 }
[2018-02-02T16:45:41.272] [INFO] info - fields { name: 'd1',
  des: '21',
  _id: '5a740e7aa90e5649a50715e7',
  create_time: '1517555322242',
  modify_time: '1517555322242',
  __v: 0 }
[2018-02-02T16:45:41.281] [INFO] info - ret { ok: 1, nModified: 1, n: 1 }
[2018-02-02T16:46:16.026] [INFO] info - { name: '1',
  des: '2',
  _id: '',
  create_time: '',
  modify_time: '',
  __v: '' }
[2018-02-02T16:53:33.140] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T16:53:49.616] [INFO] info - { name: '1', des: '2' }
[2018-02-02T16:54:10.801] [INFO] info - { name: '3', des: '4' }
[2018-02-02T16:55:09.015] [DEBUG] info - 5a7427328cae18111b4c6163
[2018-02-02T16:55:09.020] [DEBUG] info - { _id: 5a7427328cae18111b4c6163,
  name: '3',
  des: '4',
  create_time: '1517561650803',
  modify_time: '1517561650803',
  __v: 0 }
[2018-02-02T16:55:11.357] [INFO] info - fields { name: '312',
  des: '124',
  _id: '5a7427328cae18111b4c6163',
  create_time: '1517561650803',
  modify_time: '1517561650803',
  __v: 0 }
[2018-02-02T16:55:11.370] [INFO] info - ret { ok: 1, nModified: 1, n: 1 }
[2018-02-02T16:57:42.840] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T16:58:26.638] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T16:59:39.584] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T17:02:09.803] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T17:02:24.282] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T17:04:45.108] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T17:04:51.361] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T17:05:45.401] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T17:05:53.343] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T17:13:19.925] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T17:14:04.854] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T18:32:32.735] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T18:53:25.367] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] } ] }
[2018-02-02T18:53:45.136] [INFO] info - { content: '1234',
  title: '123',
  summary: '1234  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fc' ] }
[2018-02-02T18:53:45.193] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a744339c573ea5997bf8a7c,
  title: '123',
  summary: '1234  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  create_time: 1517568825137,
  modify_time: 1517568825137,
  id: '56f32a10-0807-11e8-832a-55e6c7d05485',
  __v: 0 }
[2018-02-02T18:53:45.258] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-02T18:56:09.007] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-02T18:56:19.458] [INFO] info - { content: '345',
  title: '345',
  summary: '345  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fd' ] }
[2018-02-02T18:56:19.524] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a7443d3995d835a67f6d866,
  title: '345',
  summary: '345  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  create_time: 1517568979459,
  modify_time: 1517568979459,
  id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
  __v: 0 }
[2018-02-02T18:56:19.590] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-02T18:56:53.267] [DEBUG] info - 文章列表: { total: 3,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-02T18:57:00.980] [INFO] info - { content: '444',
  title: '123',
  summary: '444  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fc' ] }
[2018-02-02T18:57:01.046] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a7443fcc2a2005af18afc7d,
  title: '123',
  summary: '444  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  create_time: 1517569020981,
  modify_time: 1517569020981,
  id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
  __v: 0 }
[2018-02-02T18:57:01.110] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-02T18:58:16.823] [DEBUG] info - 文章列表: { total: 4,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-02T18:58:23.073] [INFO] info - { content: '123123',
  title: '123',
  summary: '123123  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fc' ] }
[2018-02-02T18:58:23.143] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a74444fa5bb425b68f33d82,
  title: '123',
  summary: '123123  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  create_time: 1517569103074,
  modify_time: 1517569103074,
  id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
  __v: 0 }
[2018-02-02T18:58:23.213] [DEBUG] info - 文章列表: { total: 5,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:13:23.991] [DEBUG] info - 文章列表: { total: 5,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:13:27.023] [DEBUG] info - 文章列表: { total: 5,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:14:41.416] [DEBUG] info - 文章列表: { total: 5,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:15:01.631] [INFO] info - { content: '33333',
  title: '333',
  summary: '33333  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  tag_ids: [ '5a685fc7d681dd1b71a347fc' ] }
[2018-02-03T12:15:01.713] [INFO] info - { tag_ids: [ '5a685fc7d681dd1b71a347fc' ],
  _id: 5a753745af300312737c1e10,
  title: '333',
  summary: '33333  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60a',
  status: 2,
  create_time: 1517631301636,
  modify_time: 1517631301636,
  id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
  __v: 0 }
[2018-02-03T12:15:01.785] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:15:35.970] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:15:40.846] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:26:31.317] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:26:36.802] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:41:21.702] [DEBUG] info - 5a67efe39521803bd7f3c60b
[2018-02-03T12:41:21.708] [DEBUG] info - { article_ids: [],
  _id: 5a67efe39521803bd7f3c60b,
  catalog_id: 2,
  name: '生活感悟',
  des: '观点与感悟',
  create_time: '1516786740287',
  modify_time: '1516786740288',
  __v: 0 }
[2018-02-03T12:41:25.923] [DEBUG] info - 5a740d69a90e5649a50715e6
[2018-02-03T12:41:25.931] [DEBUG] info - { article_ids: [],
  _id: 5a740d69a90e5649a50715e6,
  name: 'aa',
  des: 'dd',
  create_time: '1517555049589',
  modify_time: '1517555049589',
  __v: 0 }
[2018-02-03T12:41:28.319] [DEBUG] info - 5a67efe39521803bd7f3c60a
[2018-02-03T12:41:28.325] [DEBUG] info - { article_ids: 
   [ 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
     'cdd85c40-0898-11e8-8a5e-a7a1b4409835' ],
  _id: 5a67efe39521803bd7f3c60a,
  catalog_id: 1,
  name: '大前端',
  des: '前端相关',
  create_time: '1516785718652',
  modify_time: '1516785718652',
  __v: 2 }
[2018-02-03T12:41:32.615] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:42:01.030] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:42:12.123] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:42:57.663] [DEBUG] info - 5a740b53a90e5649a50715e5
[2018-02-03T12:42:57.668] [DEBUG] info - { article_ids: [],
  _id: 5a740b53a90e5649a50715e5,
  name: '77',
  des: '88',
  create_time: '1517554515155',
  modify_time: '1517554515155',
  __v: 0 }
[2018-02-03T12:44:16.954] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:44:20.513] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T12:45:00.287] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T13:18:24.222] [INFO] info - { name: '12' }
[2018-02-03T13:20:50.624] [INFO] info - { name: '123' }
[2018-02-03T13:25:55.378] [INFO] info - { name: '33' }
[2018-02-03T13:26:19.566] [INFO] info - { name: '123', des: '321' }
[2018-02-03T13:34:05.896] [INFO] info - { name: '123', des: '312' }
[2018-02-03T13:34:22.696] [INFO] info - { name: '22', des: '22' }
[2018-02-03T13:36:49.226] [INFO] info - { name: '123' }
[2018-02-03T13:49:03.860] [DEBUG] info - 5a754a71d0c821215cc77049
[2018-02-03T13:49:03.869] [DEBUG] info - { article_ids: [],
  _id: 5a754a71d0c821215cc77049,
  name: '123',
  __v: 0 }
[2018-02-03T13:49:07.371] [INFO] info - fields { name: '1234',
  article_ids: [],
  _id: '5a754a71d0c821215cc77049',
  __v: 0 }
[2018-02-03T13:49:07.386] [INFO] info - ret { ok: 1, nModified: 1, n: 1 }
[2018-02-03T13:49:11.924] [DEBUG] info - 5a685fc7d681dd1b71a347fc
[2018-02-03T13:49:11.930] [DEBUG] info - { article_ids: [],
  _id: 5a685fc7d681dd1b71a347fc,
  tag_id: 2,
  name: '工程化',
  articleCount: 3,
  __v: 0 }
[2018-02-03T13:49:13.887] [INFO] info - fields { name: '工程化1',
  article_ids: [],
  _id: '5a685fc7d681dd1b71a347fc',
  __v: 0,
  tag_id: 2,
  articleCount: 3 }
[2018-02-03T13:49:13.897] [INFO] info - ret { ok: 1, nModified: 1, n: 1 }
[2018-02-03T13:49:17.810] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T13:49:45.393] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T13:50:12.127] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T13:50:14.651] [DEBUG] info - df3d7860-073c-11e8-ad2a-872e8a04125b
[2018-02-03T13:50:14.663] [DEBUG] info - { tag_ids: [ '5a685fc7d681dd1b71a347fd' ],
  _id: 5a72ef89072b3f7572078398,
  title: '1234',
  summary: '1231321324  ',
  banner: '',
  catalog_id: '5a67efe39521803bd7f3c60b',
  status: 2,
  create_time: 1517481865958,
  modify_time: 1517560462484,
  id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
  __v: 0,
  catalog_name: '生活感悟',
  tags: [ { id: '5a685fc7d681dd1b71a347fd', name: 'node' } ],
  content: '1231321324' }
[2018-02-03T13:50:38.501] [DEBUG] info - 5a685fc7d681dd1b71a347fd
[2018-02-03T13:50:38.503] [DEBUG] info - { article_ids: [],
  _id: 5a685fc7d681dd1b71a347fd,
  tag_id: 3,
  name: 'node',
  articleCount: 1,
  __v: 0 }
[2018-02-03T13:50:41.576] [DEBUG] info - 5a754620d0c821215cc77043
[2018-02-03T13:50:41.586] [DEBUG] info - { article_ids: [],
  _id: 5a754620d0c821215cc77043,
  name: '12',
  __v: 0 }
[2018-02-03T13:52:04.421] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T13:54:42.631] [DEBUG] info - 文章列表: { total: 6,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a72ef89072b3f7572078398,
       title: '1234',
       summary: '1231321324  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60b',
       status: 2,
       create_time: 1517481865958,
       modify_time: 1517560462484,
       id: 'df3d7860-073c-11e8-ad2a-872e8a04125b',
       __v: 0,
       catalog_name: '生活感悟',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a744339c573ea5997bf8a7c,
       title: '123',
       summary: '1234  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568825137,
       modify_time: 1517568825137,
       id: '56f32a10-0807-11e8-832a-55e6c7d05485',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443d3995d835a67f6d866,
       title: '345',
       summary: '345  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517568979459,
       modify_time: 1517568979459,
       id: 'b2eefc40-0807-11e8-b878-9d5cab348fc4',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a7443fcc2a2005af18afc7d,
       title: '123',
       summary: '444  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569020981,
       modify_time: 1517569020981,
       id: 'cbaebd60-0807-11e8-afad-6b5a2dfb25d7',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a74444fa5bb425b68f33d82,
       title: '123',
       summary: '123123  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517569103074,
       modify_time: 1517569103074,
       id: 'fc9cfc20-0807-11e8-b0e3-b53be998a623',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a753745af300312737c1e10,
       title: '333',
       summary: '33333  ',
       banner: '',
       catalog_id: '5a67efe39521803bd7f3c60a',
       status: 2,
       create_time: 1517631301636,
       modify_time: 1517631301636,
       id: 'cdd85c40-0898-11e8-8a5e-a7a1b4409835',
       __v: 0,
       catalog_name: '大前端',
       tags: [Array] } ] }
[2018-02-03T14:00:22.369] [INFO] info - { name: '前端', des: '我是前端' }
[2018-02-03T14:00:34.785] [INFO] info - { name: '小标签1' }
[2018-02-03T14:00:38.169] [DEBUG] info - 文章列表: { total: 0, current_page: 0, page_size: 10, data: [] }
[2018-02-03T14:00:45.622] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-02-03T14:00:45.626] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-02-03T14:00:45.704] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_4089cab439b7a704bf970f355cc4ddff',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-02-03T06:00:45.704Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_4089cab439b7a704bf970f355cc4ddff',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-02-03T14:00:56.783] [INFO] info - { content: '123123',
  title: '123',
  summary: '123123  ',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ] }
[2018-02-03T14:00:56.883] [INFO] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '123123  ',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1517637656784,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0 }
[2018-02-03T14:00:56.940] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517637656784,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-02-03T14:03:57.678] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517637656784,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-02-03T14:04:20.883] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517637656784,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-02-03T14:04:23.000] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517637656784,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-02-03T14:25:30.638] [DEBUG] info - 5a754ff6c058b426375e3b5a
[2018-02-03T14:25:30.642] [DEBUG] info - { article_ids: [ '99cefd00-08a7-11e8-8862-f9831442ac2a' ],
  _id: 5a754ff6c058b426375e3b5a,
  name: '前端',
  des: '我是前端',
  create_time: '1517637622371',
  modify_time: '1517637622371',
  __v: 1 }
[2018-02-03T14:25:34.893] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517637656784,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-02-03T14:25:37.073] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-02-03T14:25:37.094] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '123123  ',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1517637656784,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '123123' }
[2018-02-03T14:25:53.002] [INFO] info - fields { content: '**123123**',
  title: '123',
  summary: '123123  ',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1517637656784,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-02-03T14:25:53.007] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-02-03T14:25:53.057] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517639153003,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-02-03T14:25:56.372] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-02-03T14:25:56.385] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '123123  ',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1517639153003,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '**123123**' }
[2018-02-03T15:10:51.620] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517639153003,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-02-03T15:20:30.062] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517639153003,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-02-03T15:23:48.033] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517639153003,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T09:58:40.261] [DEBUG] info - 文章列表: { total: 1,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517639153003,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T09:58:49.065] [DEBUG] info - 文章列表: { total: 1,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517639153003,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T09:59:15.743] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-07T09:59:15.751] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '123123  ',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1517639153003,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '**123123**' }
[2018-03-07T09:59:23.108] [DEBUG] info - 文章列表: { total: 1,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517639153003,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T09:59:33.915] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-07T09:59:33.931] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '123123  ',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1517639153003,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '**123123**' }
[2018-03-07T09:59:39.541] [DEBUG] info - 文章列表: { total: 1,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517639153003,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T10:02:46.588] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-07T10:02:46.603] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '123123  ',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1517639153003,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '**123123**' }
[2018-03-07T10:02:48.838] [DEBUG] info - 文章列表: { total: 1,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517639153003,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:05:38.726] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '123123  ',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1517639153003,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:05:41.376] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-07T20:05:41.392] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '123123  ',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1517639153003,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '**123123**' }
[2018-03-07T20:06:16.414] [INFO] info - fields { content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1517639153003,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-07T20:06:16.430] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-07T20:06:16.480] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:06:22.748] [DEBUG] info - 文章列表: { total: 1,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:06:24.475] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-07T20:06:24.481] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-07T20:06:38.075] [DEBUG] info - 文章列表: { total: 1,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:06:47.541] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-07T20:06:47.544] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-07T20:06:47.561] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 255495,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_78a20cc351fdf5773c43528733c5615e',
     name: 'timg (3).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-07T12:06:47.560Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_78a20cc351fdf5773c43528733c5615e',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 255495,
        closed: true } } }
[2018-03-07T20:07:26.622] [INFO] info - fields { content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n**思路**\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。',
  title: 'MENU Node.js 定时任务状态监控思路与实现',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/02b6a9f0-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ] }
[2018-03-07T20:07:26.631] [INFO] info - article { ok: 1, nModified: 0, n: 0 }
[2018-03-07T20:07:26.678] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:07:29.509] [DEBUG] info - 文章列表: { total: 1,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:07:33.682] [DEBUG] info - 文章列表: { total: 1,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:08:06.250] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-07T20:08:06.256] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-07T20:08:06.266] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 24972,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_34699c524d7db91a1c6a88bf5cd80561',
     name: 'timg (6).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-07T12:08:06.266Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_34699c524d7db91a1c6a88bf5cd80561',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 24972,
        closed: true } } }
[2018-03-07T20:08:17.888] [INFO] info - { content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。',
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ] }
[2018-03-07T20:08:17.953] [INFO] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0 }
[2018-03-07T20:08:18.006] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:08:21.456] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:08:28.231] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-07T20:08:28.237] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-07T20:08:31.819] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:08:58.349] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-07T20:08:58.364] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-07T20:30:09.544] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:30:17.516] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-07T20:30:17.535] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-07T20:30:34.121] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-07T20:30:44.689] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-07T20:30:44.703] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-08T09:36:33.418] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T09:39:34.759] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T09:39:47.378] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T09:40:11.570] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T09:41:17.460] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T09:41:23.943] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-08T09:41:23.952] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-08T09:43:14.141] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T09:46:35.540] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T09:52:53.179] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T09:53:15.245] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T09:55:34.582] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:11:06.508] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:12:26.024] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:15:41.803] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:16:41.860] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:26:55.658] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:28:22.919] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:29:24.613] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:30:00.354] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:32:59.484] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:33:19.763] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T10:33:44.520] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:25:27.855] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:26:39.756] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:43:52.296] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:53:52.356] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:54:04.193] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:54:17.397] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:54:18.422] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:54:36.251] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:55:12.239] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:55:25.917] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T12:58:30.495] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T13:59:46.157] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T14:01:30.271] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T20:06:16.571] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T20:06:25.110] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T20:15:15.956] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T20:17:44.246] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-08T20:17:44.252] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-08T20:17:47.966] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T20:17:50.098] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-08T20:17:50.116] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-08T20:18:10.015] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T20:57:28.549] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T20:58:10.279] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T21:09:51.181] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-08T21:11:59.131] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T09:31:47.633] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T09:32:19.648] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T09:32:19.658] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T09:32:29.510] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T09:35:19.394] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T09:43:07.178] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-09T09:43:07.185] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-09T09:43:46.125] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T12:37:17.151] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T12:37:17.165] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T12:39:19.951] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T12:44:56.575] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T12:44:56.594] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T12:52:27.904] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T12:52:27.911] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T12:54:38.634] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T12:54:39.754] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-09T12:54:39.765] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-09T13:06:55.553] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T13:07:00.375] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-09T13:07:00.392] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-09T13:11:23.369] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-09T13:11:23.375] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-09T13:11:40.399] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T13:11:42.702] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T13:11:42.720] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T13:41:21.924] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T13:41:21.932] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T13:57:40.006] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T13:57:44.353] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T13:57:46.776] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T13:58:38.176] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T13:58:42.951] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T13:59:18.798] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T13:59:21.338] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T13:59:22.900] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:04:45.777] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:04:47.814] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:04:49.128] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:04.434] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:06.933] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:09.458] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:11.207] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:19.307] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:21.124] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:22.797] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:29.127] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:32.875] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:36.089] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:05:38.751] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T14:05:38.778] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T14:05:45.452] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T14:05:45.466] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T14:06:03.149] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:06:04.312] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T14:06:04.324] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T14:06:08.503] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-09T14:06:08.520] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-09T14:06:27.437] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:10:37.626] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T14:10:39.105] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T14:10:39.115] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T15:57:38.439] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T15:57:38.452] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T15:58:14.739] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T15:58:14.747] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:00:42.964] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:00:42.977] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:00:55.065] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:00:55.082] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:01:35.077] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '123',
       summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520424376416,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:01:37.591] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:01:37.602] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '123',
  summary: '每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。  根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:02:24.416] [INFO] info - fields { content: '\n# 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n# 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520424376416,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-09T16:02:24.429] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-09T16:02:24.466] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582544418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:02:29.276] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582544418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:02:32.554] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:02:32.572] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582544418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n# 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n# 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:02:56.981] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:02:56.993] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582544418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n# 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n# 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:03:18.724] [INFO] info - fields { content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n## 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520582544418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-09T16:03:18.730] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-09T16:03:18.772] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582598725,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:03:23.210] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:03:23.216] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582598725,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n## 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:03:30.906] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:03:30.931] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582598725,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n## 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:03:46.240] [INFO] info - fields { content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n## 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n#### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520582598725,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-09T16:03:46.246] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-09T16:03:46.288] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582626241,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:03:47.946] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:03:47.965] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582626241,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n## 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n#### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:03:59.401] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:03:59.414] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582626241,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n## 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n#### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:04:11.385] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:04:11.403] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582626241,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n## 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n#### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:05:16.600] [INFO] info - fields { content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n#### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520582626241,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-09T16:05:16.607] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-09T16:05:16.645] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582716603,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:05:18.227] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:05:18.244] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582716603,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n#### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:05:23.270] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:05:23.287] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582716603,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n#### 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:05:40.322] [INFO] info - fields { content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520582716603,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-09T16:05:40.326] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-09T16:05:40.375] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582740323,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:05:42.303] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:05:42.323] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582740323,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:06:01.883] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582740323,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:06:03.490] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-09T16:06:03.506] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-09T16:06:07.388] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582740323,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:06:08.255] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:06:08.271] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582740323,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:07:10.742] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:07:10.757] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/93353ae0-08a7-11e8-8862-f9831442ac2a.jpg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582740323,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:07:28.361] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-09T16:07:28.362] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-09T16:07:28.466] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 176412,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_3c6cb48a57a229c7936e38b50c339a64',
     name: 'timg (17).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-09T08:07:28.466Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_3c6cb48a57a229c7936e38b50c339a64',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 176412,
        closed: true } } }
[2018-03-09T16:07:32.413] [INFO] info - fields { content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520582740323,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-09T16:07:32.421] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-09T16:07:32.460] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:07:34.961] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:07:34.980] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:13:33.674] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:13:43.528] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:13:43.546] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:13:50.273] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:13:55.988] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-09T16:13:56.004] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-09T16:14:28.335] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:14:36.404] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-09T16:14:36.417] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-09T16:14:38.289] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:14:58.537] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-09T16:14:58.553] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-09T16:15:02.031] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:20:37.049] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:20:37.066] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:21:10.377] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:21:17.529] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:21:17.540] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:21:52.367] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:23:23.119] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:23:23.135] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:23:38.921] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:23:38.927] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:24:57.121] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:24:57.128] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:25:02.216] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:25:02.229] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:25:05.278] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:25:06.243] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-09T16:25:06.266] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-09T16:25:09.746] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:25:57.670] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:26:12.576] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:26:12.585] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:29:24.011] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:29:24.024] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:29:53.289] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:29:53.299] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:29:57.667] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:29:57.678] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:30:12.553] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:30:25.221] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:30:36.427] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:31:03.034] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:31:07.478] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:31:07.492] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:32:14.752] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:32:14.757] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:32:17.658] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:32:17.672] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:34:10.786] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T16:34:10.810] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T16:36:16.193] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:38:03.498] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:38:10.981] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:38:23.585] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:38:58.696] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:47:54.047] [DEBUG] info - 请求参数: { currentPage: '1', pageSize: '10' }
[2018-03-09T16:47:54.066] [DEBUG] info - 文章列表: { total: 2,
  current_page: NaN,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:51:58.939] [DEBUG] info - 请求参数: { current_page: '1', page_pize: '10' }
[2018-03-09T16:51:58.950] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:52:26.738] [DEBUG] info - 请求参数: { current_page: '1', page_pize: '10' }
[2018-03-09T16:52:26.746] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: NaN,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:52:47.070] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T16:52:47.090] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:52:49.039] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T16:52:49.050] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:54:36.220] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T16:54:36.241] [DEBUG] info - 文章列表: { total: 2,
  current_page: 0,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T16:58:28.213] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T16:58:28.235] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T17:13:16.026] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T17:13:16.036] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T17:13:20.541] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T17:13:20.561] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T17:15:21.087] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T17:15:21.106] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T17:16:44.307] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T17:16:44.328] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T17:17:31.655] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T17:17:31.662] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T17:20:34.251] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T17:20:34.274] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T17:25:35.791] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T17:25:35.803] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T17:25:38.670] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-09T17:25:38.682] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-09T17:25:39.972] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T17:25:39.989] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:03:52.479] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:03:52.488] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:04:20.557] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:04:20.569] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:10:48.759] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:10:48.779] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:10:50.299] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:10:50.312] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:12:44.294] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:12:44.305] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:12:56.624] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:12:56.637] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:13:12.854] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:13:12.862] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:13:44.495] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:13:44.506] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:14:36.621] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:14:36.632] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:14:44.056] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:14:44.069] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:15:14.285] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:15:14.294] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:18:35.430] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:18:35.440] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:19:35.430] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:19:35.440] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:20:05.168] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:20:05.177] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:21:30.986] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:21:30.993] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:44:12.260] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:44:12.270] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T18:44:37.526] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T18:44:37.547] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T19:03:12.775] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T19:03:12.786] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T19:03:18.109] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T19:03:18.128] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T19:03:23.730] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T19:03:23.751] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T19:03:29.658] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T19:03:29.666] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T19:03:31.709] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-09T19:03:31.722] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T19:08:44.319] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-09T19:08:44.344] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T19:08:51.006] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-09T19:08:51.019] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T19:09:12.206] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-09T19:09:12.221] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T19:09:17.963] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-09T19:09:17.985] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-09T19:10:23.572] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-09T19:10:23.731] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T11:43:00.391] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T11:43:00.415] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T11:43:04.037] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T11:43:04.066] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T11:43:05.989] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T11:43:06.001] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T11:43:09.987] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T11:43:10.115] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T11:43:18.353] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T11:43:18.372] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T11:43:22.772] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T11:43:22.799] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T11:46:20.110] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T11:46:20.136] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T11:54:33.190] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T11:54:33.215] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T11:55:08.126] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T11:55:08.139] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:01:11.112] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T12:01:11.120] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:01:14.271] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T12:01:14.292] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:01:15.724] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T12:01:15.743] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:01:17.117] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T12:01:17.134] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:01:22.795] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T12:01:22.803] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:01:26.394] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T12:01:26.403] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:01:27.919] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T12:01:27.933] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:02:58.980] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T12:02:58.992] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:03:08.474] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T12:03:08.484] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:03:10.249] [DEBUG] info - 请求参数: { current_page: '1', page_size: '10' }
[2018-03-10T12:03:10.261] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:07:52.885] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:07:52.904] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:07:59.813] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:07:59.820] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:15:33.217] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:15:33.228] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:18:17.107] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:18:17.127] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:18:19.580] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:18:19.587] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:18:22.528] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:18:22.548] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:19:13.978] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:19:13.986] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:20:51.436] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:20:51.453] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:20:51.476] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:20:51.499] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:20:54.389] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:20:54.400] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:21:08.043] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:21:08.059] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:21:43.577] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:21:43.598] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:21:46.631] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:21:46.648] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:22:40.856] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:22:40.879] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:22:43.125] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:22:43.142] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:22:43.929] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:22:43.958] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T12:23:17.966] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T12:23:17.985] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:19:34.596] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:19:34.603] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:19:39.303] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:19:39.313] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:19:41.139] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:19:41.158] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:21:36.191] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:21:36.207] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:34:58.369] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:34:58.375] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:35:40.527] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:35:40.540] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:36:14.678] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:36:14.689] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:36:45.087] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:36:45.096] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:37:38.774] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:37:38.782] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:47:51.377] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:47:51.386] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:47:54.544] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:47:54.559] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:47:57.065] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:47:57.085] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:48:52.949] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:48:52.962] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:51:18.548] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:51:18.555] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:51:20.842] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:51:20.851] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:51:23.243] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:51:23.259] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:52:10.526] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:52:10.534] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:53:38.993] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:53:39.004] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:54:01.053] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:54:01.063] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T13:54:03.911] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T13:54:03.931] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:11:22.316] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:11:22.331] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:11:29.112] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T14:11:29.121] [DEBUG] info - 文章列表: { total: 2,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:13:04.529] [INFO] info - { content: '### 有赞广告平台依托于有赞微商城，\n帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把广告系统的数据统计服务演进历程以及踩过的坑、得到的感悟和各位同僚分享一下😊\n\n**大数据系统的Lambda架构**\n\n      大数据处理技术需要解决数据的可伸缩性与复杂性。首先要很好地处理分区与复制，不会导致错误分区引起查询失败。当需要扩展系统        \n       时，可以非常方便地增加节点，系统也能够针对新节点进行rebalance。其次是要让数据成为不可变的。原始数据永远都不能被修改，\n       这样即使犯了错误，写了错误数据，原来好的数据并不会受到破坏。\n\nLambda架构的主要思想是将大数据系\n\n```\n统架构为多个层次：\n批处理层（batchlayer）、\n实时处理层（speedlayer）、\n服务层（servinglayer）。\n\n```\n\n批处理层生产离线数据，是每天重新计算的，实时处理层的数据增量更新，数据时效过去之后会被清理，由批处理层的数据替代。服务层则对外提供数据服务，综合批处理层以及实时处理层的数据。典型的lambda架构图如下： ',
  title: 'Lambda架构在有赞广告平台的应用与演进',
  summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ] }
[2018-03-10T14:13:04.819] [INFO] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5aa3777028a0a17533cd99d4,
  title: 'Lambda架构在有赞广告平台的应用与演进',
  summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662384534,
  modify_time: 1520662384534,
  id: '180a1360-242a-11e8-b43a-85e82b4cc450',
  __v: 0 }
[2018-03-10T14:13:04.888] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T14:13:04.926] [DEBUG] info - 文章列表: { total: 3,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:13:09.285] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:13:09.311] [DEBUG] info - 文章列表: { total: 3,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:13:29.611] [INFO] info - { name: 'NODE' }
[2018-03-10T14:13:36.018] [INFO] info - { name: 'VUE' }
[2018-03-10T14:13:38.714] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T14:13:38.733] [DEBUG] info - 文章列表: { total: 3,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:14:25.988] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T14:14:25.991] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T14:14:26.034] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 208288,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_2ecb2c56ded3dffedf98ba5c097b7cae',
     name: 'timg (17.jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T06:14:26.033Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_2ecb2c56ded3dffedf98ba5c097b7cae',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 208288,
        closed: true } } }
[2018-03-10T14:14:27.916] [INFO] info - { content: '现在，用户对于前端页面的要求已经不能满\n\n足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。\n\nReact 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提供动画效果，需要开发者自行实现，而传统 web 动画大多数都通过直接操作实际 DOM 元素来实现，这在 React 中显然是不被提倡的。那么，在 React 中动画都是如何实现的呢？\n\n所有动画的本质都是连续修改 DOM 元素的一个或者多个属性，使其产生连贯的变化效果，从而形成动画。在 React 中实现动画本质上与传统 web 动画一样，仍然是两种方式： 通过 css3 动画实现和通过 js 修改元素属性。只不过在具体实现时，要更为符合 React 的框架特性，可以概括为几类：\n\n基于定时器或 requestAnimationFrame(RAF) 的间隔动画；\n基于 css3 的简单动画；\nReact 动画插件 CssTransitionGroup；\n结合 hook 实现复杂动画；\n其他第三方动画库。',
  title: 'React 中常见的动画实现方式',
  summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
  banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5aa3778928a0a17533cd99d6', '5aa3779028a0a17533cd99d7' ] }
[2018-03-10T14:14:27.979] [INFO] info - { tag_ids: [ '5aa3778928a0a17533cd99d6', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa377c328a0a17533cd99d8,
  title: 'React 中常见的动画实现方式',
  summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
  banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662467919,
  modify_time: 1520662467919,
  id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
  __v: 0 }
[2018-03-10T14:14:28.031] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T14:14:28.064] [DEBUG] info - 文章列表: { total: 4,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:14:31.916] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:14:31.943] [DEBUG] info - 文章列表: { total: 4,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:14:34.538] [DEBUG] info - 49bd9df0-242a-11e8-b43a-85e82b4cc450
[2018-03-10T14:14:34.552] [DEBUG] info - { tag_ids: [ '5aa3778928a0a17533cd99d6', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa377c328a0a17533cd99d8,
  title: 'React 中常见的动画实现方式',
  summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
  banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662467919,
  modify_time: 1520662467919,
  id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5aa3778928a0a17533cd99d6', name: 'NODE' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '现在，用户对于前端页面的要求已经不能满\n\n足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。\n\nReact 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提供动画效果，需要开发者自行实现，而传统 web 动画大多数都通过直接操作实际 DOM 元素来实现，这在 React 中显然是不被提倡的。那么，在 React 中动画都是如何实现的呢？\n\n所有动画的本质都是连续修改 DOM 元素的一个或者多个属性，使其产生连贯的变化效果，从而形成动画。在 React 中实现动画本质上与传统 web 动画一样，仍然是两种方式： 通过 css3 动画实现和通过 js 修改元素属性。只不过在具体实现时，要更为符合 React 的框架特性，可以概括为几类：\n\n基于定时器或 requestAnimationFrame(RAF) 的间隔动画；\n基于 css3 的简单动画；\nReact 动画插件 CssTransitionGroup；\n结合 hook 实现复杂动画；\n其他第三方动画库。' }
[2018-03-10T14:14:43.854] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:14:43.876] [DEBUG] info - 文章列表: { total: 4,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:14:47.882] [DEBUG] info - 180a1360-242a-11e8-b43a-85e82b4cc450
[2018-03-10T14:14:47.894] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5aa3777028a0a17533cd99d4,
  title: 'Lambda架构在有赞广告平台的应用与演进',
  summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662384534,
  modify_time: 1520662384534,
  id: '180a1360-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '### 有赞广告平台依托于有赞微商城，\n帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把广告系统的数据统计服务演进历程以及踩过的坑、得到的感悟和各位同僚分享一下😊\n\n**大数据系统的Lambda架构**\n\n      大数据处理技术需要解决数据的可伸缩性与复杂性。首先要很好地处理分区与复制，不会导致错误分区引起查询失败。当需要扩展系统        \n       时，可以非常方便地增加节点，系统也能够针对新节点进行rebalance。其次是要让数据成为不可变的。原始数据永远都不能被修改，\n       这样即使犯了错误，写了错误数据，原来好的数据并不会受到破坏。\n\nLambda架构的主要思想是将大数据系\n\n```\n统架构为多个层次：\n批处理层（batchlayer）、\n实时处理层（speedlayer）、\n服务层（servinglayer）。\n\n```\n\n批处理层生产离线数据，是每天重新计算的，实时处理层的数据增量更新，数据时效过去之后会被清理，由批处理层的数据替代。服务层则对外提供数据服务，综合批处理层以及实时处理层的数据。典型的lambda架构图如下： ' }
[2018-03-10T14:15:20.334] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:15:20.357] [DEBUG] info - 文章列表: { total: 4,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:15:22.468] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T14:15:22.487] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T14:15:26.056] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:15:26.076] [DEBUG] info - 文章列表: { total: 4,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:16:33.556] [INFO] info - { content: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。\n\n因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 requestAnimationFrame 不断修改 state，触发组件更新，从而实现动画效果。\n\n示例\n以一个进度条为例，代码如下所示：\n\n\n```\n// 使用requestAnimationFrame改变state\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent >= 90 ? 100 : percent + 10;\n        const speed = (targetPercent - percent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.min(parseInt(speed * progress + percent, 10), targetPercent);\n            this.setState({\n                percent: currentProgress\n            });\n            if (currentProgress < targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    decrease = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent < 10 ? 0 : percent - 10;\n        const speed = (percent - targetPercent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.max(parseInt(percent - speed * progress, 10), targetPercent);\n            this.setState({\n                    percent: currentProgress\n                });\n            if (currentProgress > targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    render() {\n        const { percent } = this.state;\n\n        return (\n            <div>\n                <div className="progress">\n                    <div className="progress-wrapper" >\n                        <div className="progress-inner" style = {{width: `${percent}%`}} ></div>\n                    </div>\n                    <div className="progress-info" >{percent}%</div>\n                </div>\n                <div className="btns">\n                    <button onClick={this.decrease}>-</button>\n                    <button onClick={this.increase}>+</button>\n                </div>\n            </div>\n        );\n    }\n}\n```',
  title: '基于定时器或 RAF 的间隔动画',
  summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5aa3778928a0a17533cd99d6' ] }
[2018-03-10T14:16:33.585] [INFO] info - { tag_ids: [ '5aa3778928a0a17533cd99d6' ],
  _id: 5aa3784128a0a17533cd99da,
  title: '基于定时器或 RAF 的间隔动画',
  summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662593561,
  modify_time: 1520662593561,
  id: '94a11090-242a-11e8-b43a-85e82b4cc450',
  __v: 0 }
[2018-03-10T14:16:33.630] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T14:16:33.665] [DEBUG] info - 文章列表: { total: 5,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:16:36.131] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:16:36.155] [DEBUG] info - 文章列表: { total: 5,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:17:09.541] [INFO] info - { content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示',
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ] }
[2018-03-10T14:17:09.654] [INFO] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0 }
[2018-03-10T14:17:09.691] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T14:17:09.736] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:17:13.357] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:17:13.409] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:17:20.754] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:17:20.768] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:17:34.684] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:17:34.715] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:17:49.225] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:17:49.257] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:17:59.622] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:17:59.645] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:18:02.114] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:18:02.148] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:21:04.900] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:21:04.933] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:21:42.518] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:21:42.548] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:21:48.607] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:21:48.619] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:28:28.909] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:28:28.921] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:28:32.368] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:28:32.401] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:29:06.675] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:29:06.717] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:29:35.944] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:29:35.962] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:31:42.268] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:31:42.298] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:33:02.030] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:33:02.046] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:33:15.663] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:33:15.693] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:33:29.720] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:33:29.736] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:33:34.180] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:33:34.199] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:33:38.317] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:33:38.349] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:34:23.957] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:34:23.983] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:34:52.345] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:34:52.365] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:35:10.989] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:35:11.005] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:35:14.659] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:35:14.691] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:40:57.277] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:40:57.300] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:41:05.624] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:41:05.641] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:41:08.478] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:41:08.498] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:41:09.641] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:41:09.668] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:41:14.870] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:41:14.890] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:43:47.565] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:43:47.603] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:44:00.559] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:44:00.583] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:44:03.551] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:44:03.585] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:44:11.921] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:44:11.939] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:44:17.004] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:44:17.019] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:44:20.874] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:44:20.893] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:45:36.323] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:45:36.344] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:46:30.403] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:46:30.432] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:46:35.146] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:46:35.171] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:53:47.737] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T14:53:47.754] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:53:56.534] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:53:56.549] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:54:00.308] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T14:54:00.317] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:54:15.719] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:54:15.753] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:54:30.588] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T14:54:30.604] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:55:40.511] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:55:40.547] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:55:44.176] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:55:44.194] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:55:48.778] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T14:55:48.788] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:55:50.451] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:55:50.477] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:57:05.992] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T14:57:06.009] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:57:08.511] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:57:08.547] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:57:12.600] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T14:57:12.610] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:59:18.966] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:59:18.996] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:59:22.487] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T14:59:22.506] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:59:25.768] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T14:59:25.806] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T14:59:28.129] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T14:59:28.143] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:00:19.485] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:00:19.495] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:06:51.090] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:06:51.104] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:06:53.666] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T15:06:53.696] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:06:55.989] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:06:56.009] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:07:03.993] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:07:04.003] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:07:10.518] [DEBUG] info - aa137b70-242a-11e8-b43a-85e82b4cc450
[2018-03-10T15:07:10.526] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5a755002c058b426375e3b5b', name: '小标签1' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示' }
[2018-03-10T15:07:16.382] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:07:16.404] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:07:37.502] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T15:07:37.520] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:07:45.814] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:07:45.829] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:07:49.039] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T15:07:49.074] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:07:57.404] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:07:57.419] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:08:01.842] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T15:08:01.869] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:08:03.747] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:08:03.769] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:08:04.978] [DEBUG] info - aa137b70-242a-11e8-b43a-85e82b4cc450
[2018-03-10T15:08:05.000] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5a755002c058b426375e3b5b', name: '小标签1' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示' }
[2018-03-10T15:08:10.725] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:08:10.743] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:08:12.154] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T15:08:12.179] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:08:31.104] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:08:31.121] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:08:34.095] [DEBUG] info - aa137b70-242a-11e8-b43a-85e82b4cc450
[2018-03-10T15:08:34.115] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5a755002c058b426375e3b5b', name: '小标签1' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示' }
[2018-03-10T15:12:35.534] [DEBUG] info - aa137b70-242a-11e8-b43a-85e82b4cc450
[2018-03-10T15:12:35.544] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5a755002c058b426375e3b5b', name: '小标签1' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示' }
[2018-03-10T15:16:28.043] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:16:28.057] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:16:29.073] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:16:29.079] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:16:30.821] [DEBUG] info - aa137b70-242a-11e8-b43a-85e82b4cc450
[2018-03-10T15:16:30.830] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5a755002c058b426375e3b5b', name: '小标签1' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示' }
[2018-03-10T15:17:45.057] [DEBUG] info - aa137b70-242a-11e8-b43a-85e82b4cc450
[2018-03-10T15:17:45.067] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5a755002c058b426375e3b5b', name: '小标签1' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示' }
[2018-03-10T15:18:07.205] [DEBUG] info - aa137b70-242a-11e8-b43a-85e82b4cc450
[2018-03-10T15:18:07.218] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5a755002c058b426375e3b5b', name: '小标签1' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示' }
[2018-03-10T15:18:51.438] [DEBUG] info - aa137b70-242a-11e8-b43a-85e82b4cc450
[2018-03-10T15:18:51.449] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5a755002c058b426375e3b5b', name: '小标签1' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示' }
[2018-03-10T15:19:48.287] [DEBUG] info - aa137b70-242a-11e8-b43a-85e82b4cc450
[2018-03-10T15:19:48.297] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5a755002c058b426375e3b5b', name: '小标签1' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示' }
[2018-03-10T15:19:52.983] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T15:19:53.001] [DEBUG] info - 文章列表: { total: 6,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:20:00.078] [DEBUG] info - aa137b70-242a-11e8-b43a-85e82b4cc450
[2018-03-10T15:20:00.088] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3786528a0a17533cd99dc,
  title: '基于 css3 的简单动画',
  summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662629543,
  modify_time: 1520662629543,
  id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5a755002c058b426375e3b5b', name: '小标签1' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。\n\n示例\n我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：\n\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent + 10;\n        this.setState({\n            percent: percent > 100 ? 100 : percent,\n        })\n    }\n\n    decrease = () => {\n        const percent = this.state.percent - 10;\n        this.setState({\n            percent: percent < 0 ? 0 : percent,\n        })\n    }\n\n    render() {\n        // 同上例， 省略\n        ....\n    }\n}\n.progress-inner {\n  transition: width 400ms cubic-bezier(0.08, 0.82, 0.17, 1);\n  // 其他样式同上，省略\n  ...\n}\n在示例中，increase 和 decrease 函数中不再计算 width，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 transition 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。\n\n进度条效果\n\n基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 state 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 state 来实现入场和离场动画，其中一个 state 用于控制元素是否显示，另一个 state 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。\n\n三、React 动画插件 CssTransitionGroup\nReact 曾为开发者提供过动画插件 react-addons-css-transition-group，后交由社区维护，形成现在的 react-transition-group，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。react-transition-group 包含 CSSTransitionGroup 和 TransitionGroup 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。\n\n示例\n以一个动态增加tab的为例，代码如下：\n\nimport React, { Component } from \'react\';  \nimport { CSSTransitionGroup } from \'react-transition-group\';\n\nlet uid = 2;  \nexport default class Tabs extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            activeId: 1,\n            tabData: [{\n                id: 1,\n                panel: \'选项1\'\n            }, {\n                id: 2,\n                panel: \'选项2\'\n            }]\n        };\n    }\n\n    addTab = () => {\n        // 添加tab代码\n        ...\n    }\n\n    deleteTab = (id) => {\n        // 删除tab代码\n        ...\n    }\n\n    render() {\n        const { tabData, activeId } = this.state;\n\n        const renderTabs = () => {\n            return tabData.map((item, index) => {\n                return (\n                    <div\n                        className={`tab-item${item.id === activeId ? \' tab-item-active\' : \'\'}`}\n                        key={`tab${item.id}`}\n                    >\n                        {item.panel}\n                        <span className="btns btn-delete" onClick={() => this.deleteTab(item.id)}>✕</span>\n                    </div>\n                );\n            })\n        }\n\n        return (\n            <div>\n                <div className="tabs" >\n                    <CSSTransitionGroup\n                      transitionName="tabs-wrap"\n                      transitionEnterTimeout={500}\n                      transitionLeaveTimeout={500}\n                    >\n                      {renderTabs()}\n                    </CSSTransitionGroup>\n                    <span className="btns btn-add" onClick={this.addTab}>+</span>\n                </div>\n                <div className="tab-cont">\n                    cont\n                </div>\n            </div>\n        );\n    }\n}\n/* tab动态增加动画 */\n.tabs-wrap-enter {\n  opacity: 0.01;\n}\n\n.tabs-wrap-enter.tabs-wrap-enter-active {\n  opacity: 1;\n  transition: all 500ms ease-in;\n}\n\n.tabs-wrap-leave {\n  opacity: 1;\n}\n\n.tabs-wrap-leave.tabs-wrap-leave-active {\n  opacity: 0.01;\n  transition: all 500ms ease-in;\n}\nCSSTransitionGroup 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 CSSTransitionGroup 组件中。 当设定 transitionName 属性为 \'tabs-wrapper\'，transitionEnterTimeout 为400毫秒后，一旦 CSSTransitionGroup 中新增节点，该新增节点会在出现时被添加上 css 类 \'tabs-wrapper-enter\'，然后在下一帧时被添加上 css 类 \'tabs-wrapper-enter-active\'。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400毫秒后 css 类 \'tabs-wrapper-enter\' 和 \'tabs-wrapper-enter-active\' 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 \'tabs-wrapper-leave\' 和 \'tabs-wrapper-leave-active\'。该示例效果如下图所示' }
[2018-03-10T15:20:05.561] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T15:20:05.576] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:20:08.319] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:20:08.332] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:20:41.008] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:20:41.019] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:22:15.517] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:22:15.524] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:25:20.902] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T15:25:20.926] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:25:22.571] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T15:25:22.592] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T15:31:09.006] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T15:31:09.012] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T15:31:12.821] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T15:31:12.853] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T15:31:15.819] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:31:15.832] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:31:20.453] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:31:20.474] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:31:33.225] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:31:33.230] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:31:34.519] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:31:34.531] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:31:53.397] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:31:53.411] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:36:32.407] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:36:32.415] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:36:47.712] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:36:47.721] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:37:57.422] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:37:57.429] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:38:13.684] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:38:13.691] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:38:27.983] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:38:27.990] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:39:40.390] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:39:40.401] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:39:45.126] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:39:45.135] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:40:03.363] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:40:03.372] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:40:05.364] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:40:05.370] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:40:15.078] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:40:15.084] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:40:17.633] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:40:17.644] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:40:24.524] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:40:24.531] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:41:01.595] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:41:01.612] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:41:04.405] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:41:04.423] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:41:04.949] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:41:04.958] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:41:06.281] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:41:06.298] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:41:29.172] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:41:29.180] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:41:29.188] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:41:29.194] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:47:38.309] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:47:38.313] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:47:38.322] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:47:38.326] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:47:42.393] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:47:42.399] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:47:58.058] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:47:58.068] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:48:18.758] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:48:18.767] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:48:30.417] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:48:30.425] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:49:18.339] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:49:18.347] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:52:32.641] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:52:32.651] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:56:15.871] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:56:15.880] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:57:03.660] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:57:03.671] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T15:57:28.299] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T15:57:28.309] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T16:00:25.808] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T16:00:25.817] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T16:01:51.759] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T16:01:51.767] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T16:02:02.262] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T16:02:02.273] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T16:02:21.421] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T16:02:21.429] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T16:02:46.664] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T16:02:46.686] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T16:02:52.751] [DEBUG] info - 94a11090-242a-11e8-b43a-85e82b4cc450
[2018-03-10T16:02:52.771] [DEBUG] info - { tag_ids: [ '5aa3778928a0a17533cd99d6' ],
  _id: 5aa3784128a0a17533cd99da,
  title: '基于定时器或 RAF 的间隔动画',
  summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662593561,
  modify_time: 1520662593561,
  id: '94a11090-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3778928a0a17533cd99d6', name: 'NODE' } ],
  content: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。\n\n因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 requestAnimationFrame 不断修改 state，触发组件更新，从而实现动画效果。\n\n示例\n以一个进度条为例，代码如下所示：\n\n\n```\n// 使用requestAnimationFrame改变state\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent >= 90 ? 100 : percent + 10;\n        const speed = (targetPercent - percent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.min(parseInt(speed * progress + percent, 10), targetPercent);\n            this.setState({\n                percent: currentProgress\n            });\n            if (currentProgress < targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    decrease = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent < 10 ? 0 : percent - 10;\n        const speed = (percent - targetPercent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.max(parseInt(percent - speed * progress, 10), targetPercent);\n            this.setState({\n                    percent: currentProgress\n                });\n            if (currentProgress > targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    render() {\n        const { percent } = this.state;\n\n        return (\n            <div>\n                <div className="progress">\n                    <div className="progress-wrapper" >\n                        <div className="progress-inner" style = {{width: `${percent}%`}} ></div>\n                    </div>\n                    <div className="progress-info" >{percent}%</div>\n                </div>\n                <div className="btns">\n                    <button onClick={this.decrease}>-</button>\n                    <button onClick={this.increase}>+</button>\n                </div>\n            </div>\n        );\n    }\n}\n```' }
[2018-03-10T16:02:59.978] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T16:03:00.005] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T16:04:23.734] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T16:04:23.751] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T16:04:26.969] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T16:04:26.999] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T16:04:28.435] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T16:04:28.454] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T16:04:40.406] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T16:04:40.433] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T16:06:31.514] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T16:06:31.532] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T16:06:42.012] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T16:06:42.025] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T16:08:09.214] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T16:08:09.219] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T16:08:15.732] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T16:08:15.760] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T16:22:41.768] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T16:22:41.773] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T16:22:41.792] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_a7204c603b5966b6c70c7315fd0c2f37',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T08:22:41.792Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_a7204c603b5966b6c70c7315fd0c2f37',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-03-10T16:31:24.439] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T16:31:24.440] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T16:31:24.446] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 320961,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_2dbd2007337a805305dd355d155ad081',
     name: 'timg (2).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T08:31:24.445Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_2dbd2007337a805305dd355d155ad081',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 320961,
        closed: true } } }
[2018-03-10T16:31:31.499] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T16:31:31.541] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T16:31:39.183] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T16:31:39.185] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T16:31:39.189] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 65597,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_2fbe981630b0d0f64bebbaaab47f40ff',
     name: 'timg (8).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T08:31:39.189Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_2fbe981630b0d0f64bebbaaab47f40ff',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 65597,
        closed: true } } }
[2018-03-10T16:39:25.531] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T16:39:25.580] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T16:39:30.115] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T16:39:30.118] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T16:39:30.143] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_b882abe068dab3e00d0489ec68fc832a',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T08:39:30.142Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_b882abe068dab3e00d0489ec68fc832a',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-03-10T16:45:38.634] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T16:45:38.638] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T16:45:38.649] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 166756,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_bcdec6cfd9b4c6161e1a3badf0392e59',
     name: 'timg (9).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T08:45:38.649Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_bcdec6cfd9b4c6161e1a3badf0392e59',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 166756,
        closed: true } } }
[2018-03-10T17:09:54.294] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:09:54.298] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:09:54.308] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 349532,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_d2ba35efbc2dac9aa5bff6d2980f19a8',
     name: 'timg (5).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:09:54.307Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_d2ba35efbc2dac9aa5bff6d2980f19a8',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 349532,
        closed: true } } }
[2018-03-10T17:14:46.050] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:14:46.055] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:14:46.065] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 40011,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_f607e40e16ef6ee0e084b1289a697f0e',
     name: 'timg (7).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:14:46.064Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_f607e40e16ef6ee0e084b1289a697f0e',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 40011,
        closed: true } } }
[2018-03-10T17:16:52.304] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:16:52.307] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:16:52.316] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 182551,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_4364c801b011e26f884ee8a2f34ec16f',
     name: 'timg (4).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:16:52.316Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_4364c801b011e26f884ee8a2f34ec16f',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 182551,
        closed: true } } }
[2018-03-10T17:17:54.630] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:17:54.634] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:17:54.647] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_c913f090824388899fb41a35ffef9c82',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:17:54.647Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_c913f090824388899fb41a35ffef9c82',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-03-10T17:18:23.412] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:18:23.472] [DEBUG] info - 文章列表: { total: 6,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:18:28.354] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:18:28.357] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:18:28.378] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 459957,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_b5af0e449074c013f2965b0aa4d04e41',
     name: '15111G33543-1.jpg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:18:28.378Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_b5af0e449074c013f2965b0aa4d04e41',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 459957,
        closed: true } } }
[2018-03-10T17:18:40.541] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:18:40.545] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:18:40.560] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 349532,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_c1f50d4d96cce7e88df88e3d5b4dc113',
     name: 'timg (5).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:18:40.559Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_c1f50d4d96cce7e88df88e3d5b4dc113',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 349532,
        closed: true } } }
[2018-03-10T17:18:54.542] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:18:54.549] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:18:54.559] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 275221,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_b3dc23c117847bb74295123ca0ccf220',
     name: 'timg (15).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:18:54.559Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_b3dc23c117847bb74295123ca0ccf220',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 275221,
        closed: true } } }
[2018-03-10T17:19:11.738] [INFO] info - { content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n# 大\n\n水电费\n\n sd发\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n',
  title: '最后一试',
  summary: ' 大 水电费  sd发    ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5aa3779028a0a17533cd99d7' ] }
[2018-03-10T17:19:11.809] [INFO] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发    ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673551739,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0 }
[2018-03-10T17:19:11.853] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:19:11.889] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发    ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673551739,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:19:19.018] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:19:19.041] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发    ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673551739,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:19:23.909] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T17:19:23.921] [DEBUG] info - 文章列表: { total: 7,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:19:30.072] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:19:30.103] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发    ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673551739,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:19:33.565] [DEBUG] info - 183654b0-2444-11e8-af29-e73e7c70ae4a
[2018-03-10T17:19:33.576] [DEBUG] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发    ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673551739,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n# 大\n\n水电费\n\n sd发\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n' }
[2018-03-10T17:20:36.809] [DEBUG] info - 183654b0-2444-11e8-af29-e73e7c70ae4a
[2018-03-10T17:20:36.829] [DEBUG] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发    ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673551739,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n# 大\n\n水电费\n\n sd发\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n' }
[2018-03-10T17:21:09.039] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:21:09.045] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:21:09.058] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 166756,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_baae4837f29416844cbb63d402d71a2f',
     name: 'timg (9).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:21:09.058Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_baae4837f29416844cbb63d402d71a2f',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 166756,
        closed: true } } }
[2018-03-10T17:21:10.330] [INFO] info - fields { content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n## 大\n\n水电费\n\n sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n',
  title: '最后一试',
  summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: '5aa3a30f5ac2662e019d714c',
  create_time: 1520673551739,
  modify_time: 1520673551739,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ] }
[2018-03-10T17:21:10.421] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-10T17:21:10.502] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:21:10.570] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:21:13.387] [DEBUG] info - 183654b0-2444-11e8-af29-e73e7c70ae4a
[2018-03-10T17:21:13.398] [DEBUG] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673670331,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n## 大\n\n水电费\n\n sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n' }
[2018-03-10T17:21:24.919] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:21:24.946] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:21:41.650] [DEBUG] info - 180a1360-242a-11e8-b43a-85e82b4cc450
[2018-03-10T17:21:41.662] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5aa3777028a0a17533cd99d4,
  title: 'Lambda架构在有赞广告平台的应用与演进',
  summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662384534,
  modify_time: 1520662384534,
  id: '180a1360-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '### 有赞广告平台依托于有赞微商城，\n帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把广告系统的数据统计服务演进历程以及踩过的坑、得到的感悟和各位同僚分享一下😊\n\n**大数据系统的Lambda架构**\n\n      大数据处理技术需要解决数据的可伸缩性与复杂性。首先要很好地处理分区与复制，不会导致错误分区引起查询失败。当需要扩展系统        \n       时，可以非常方便地增加节点，系统也能够针对新节点进行rebalance。其次是要让数据成为不可变的。原始数据永远都不能被修改，\n       这样即使犯了错误，写了错误数据，原来好的数据并不会受到破坏。\n\nLambda架构的主要思想是将大数据系\n\n```\n统架构为多个层次：\n批处理层（batchlayer）、\n实时处理层（speedlayer）、\n服务层（servinglayer）。\n\n```\n\n批处理层生产离线数据，是每天重新计算的，实时处理层的数据增量更新，数据时效过去之后会被清理，由批处理层的数据替代。服务层则对外提供数据服务，综合批处理层以及实时处理层的数据。典型的lambda架构图如下： ' }
[2018-03-10T17:22:32.115] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:22:32.153] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:23:27.784] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:23:27.804] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:23:56.945] [DEBUG] info - 94a11090-242a-11e8-b43a-85e82b4cc450
[2018-03-10T17:23:56.950] [DEBUG] info - { tag_ids: [ '5aa3778928a0a17533cd99d6' ],
  _id: 5aa3784128a0a17533cd99da,
  title: '基于定时器或 RAF 的间隔动画',
  summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662593561,
  modify_time: 1520662593561,
  id: '94a11090-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3778928a0a17533cd99d6', name: 'NODE' } ],
  content: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。\n\n因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 requestAnimationFrame 不断修改 state，触发组件更新，从而实现动画效果。\n\n示例\n以一个进度条为例，代码如下所示：\n\n\n```\n// 使用requestAnimationFrame改变state\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent >= 90 ? 100 : percent + 10;\n        const speed = (targetPercent - percent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.min(parseInt(speed * progress + percent, 10), targetPercent);\n            this.setState({\n                percent: currentProgress\n            });\n            if (currentProgress < targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    decrease = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent < 10 ? 0 : percent - 10;\n        const speed = (percent - targetPercent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.max(parseInt(percent - speed * progress, 10), targetPercent);\n            this.setState({\n                    percent: currentProgress\n                });\n            if (currentProgress > targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    render() {\n        const { percent } = this.state;\n\n        return (\n            <div>\n                <div className="progress">\n                    <div className="progress-wrapper" >\n                        <div className="progress-inner" style = {{width: `${percent}%`}} ></div>\n                    </div>\n                    <div className="progress-info" >{percent}%</div>\n                </div>\n                <div className="btns">\n                    <button onClick={this.decrease}>-</button>\n                    <button onClick={this.increase}>+</button>\n                </div>\n            </div>\n        );\n    }\n}\n```' }
[2018-03-10T17:24:55.419] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:24:55.445] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:24:58.712] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T17:24:58.721] [DEBUG] info - 文章列表: { total: 7,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:25:02.395] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:25:02.429] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:25:17.660] [DEBUG] info - 49bd9df0-242a-11e8-b43a-85e82b4cc450
[2018-03-10T17:25:17.677] [DEBUG] info - { tag_ids: [ '5aa3778928a0a17533cd99d6', '5aa3779028a0a17533cd99d7' ],
  _id: 5aa377c328a0a17533cd99d8,
  title: 'React 中常见的动画实现方式',
  summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
  banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662467919,
  modify_time: 1520662467919,
  id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: 
   [ { id: '5aa3778928a0a17533cd99d6', name: 'NODE' },
     { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '现在，用户对于前端页面的要求已经不能满\n\n足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。\n\nReact 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提供动画效果，需要开发者自行实现，而传统 web 动画大多数都通过直接操作实际 DOM 元素来实现，这在 React 中显然是不被提倡的。那么，在 React 中动画都是如何实现的呢？\n\n所有动画的本质都是连续修改 DOM 元素的一个或者多个属性，使其产生连贯的变化效果，从而形成动画。在 React 中实现动画本质上与传统 web 动画一样，仍然是两种方式： 通过 css3 动画实现和通过 js 修改元素属性。只不过在具体实现时，要更为符合 React 的框架特性，可以概括为几类：\n\n基于定时器或 requestAnimationFrame(RAF) 的间隔动画；\n基于 css3 的简单动画；\nReact 动画插件 CssTransitionGroup；\n结合 hook 实现复杂动画；\n其他第三方动画库。' }
[2018-03-10T17:26:18.706] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:26:18.731] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:26:20.230] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:26:20.253] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:26:21.712] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:26:21.769] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:26:22.787] [DEBUG] info - 180a1360-242a-11e8-b43a-85e82b4cc450
[2018-03-10T17:26:22.815] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5aa3777028a0a17533cd99d4,
  title: 'Lambda架构在有赞广告平台的应用与演进',
  summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662384534,
  modify_time: 1520662384534,
  id: '180a1360-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '### 有赞广告平台依托于有赞微商城，\n帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把广告系统的数据统计服务演进历程以及踩过的坑、得到的感悟和各位同僚分享一下😊\n\n**大数据系统的Lambda架构**\n\n      大数据处理技术需要解决数据的可伸缩性与复杂性。首先要很好地处理分区与复制，不会导致错误分区引起查询失败。当需要扩展系统        \n       时，可以非常方便地增加节点，系统也能够针对新节点进行rebalance。其次是要让数据成为不可变的。原始数据永远都不能被修改，\n       这样即使犯了错误，写了错误数据，原来好的数据并不会受到破坏。\n\nLambda架构的主要思想是将大数据系\n\n```\n统架构为多个层次：\n批处理层（batchlayer）、\n实时处理层（speedlayer）、\n服务层（servinglayer）。\n\n```\n\n批处理层生产离线数据，是每天重新计算的，实时处理层的数据增量更新，数据时效过去之后会被清理，由批处理层的数据替代。服务层则对外提供数据服务，综合批处理层以及实时处理层的数据。典型的lambda架构图如下： ' }
[2018-03-10T17:26:38.387] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:26:38.418] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:26:42.878] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T17:26:42.890] [DEBUG] info - 文章列表: { total: 7,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:26:44.057] [DEBUG] info - 183654b0-2444-11e8-af29-e73e7c70ae4a
[2018-03-10T17:26:44.075] [DEBUG] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673670331,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n## 大\n\n水电费\n\n sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n' }
[2018-03-10T17:30:57.369] [DEBUG] info - 183654b0-2444-11e8-af29-e73e7c70ae4a
[2018-03-10T17:30:57.376] [DEBUG] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673670331,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n## 大\n\n水电费\n\n sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n' }
[2018-03-10T17:45:40.869] [DEBUG] info - 183654b0-2444-11e8-af29-e73e7c70ae4a
[2018-03-10T17:45:40.888] [DEBUG] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673670331,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n## 大\n\n水电费\n\n sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n' }
[2018-03-10T17:45:55.702] [DEBUG] info - 183654b0-2444-11e8-af29-e73e7c70ae4a
[2018-03-10T17:45:55.712] [DEBUG] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673670331,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n## 大\n\n水电费\n\n sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n' }
[2018-03-10T17:46:00.193] [DEBUG] info - 183654b0-2444-11e8-af29-e73e7c70ae4a
[2018-03-10T17:46:00.202] [DEBUG] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673670331,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n## 大\n\n水电费\n\n sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n' }
[2018-03-10T17:46:13.168] [DEBUG] info - 183654b0-2444-11e8-af29-e73e7c70ae4a
[2018-03-10T17:46:13.179] [DEBUG] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673670331,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n## 大\n\n水电费\n\n sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n' }
[2018-03-10T17:47:18.552] [DEBUG] info - 请求参数: { current_page: '2', page_size: '5' }
[2018-03-10T17:47:18.566] [DEBUG] info - 文章列表: { total: 7,
  current_page: 2,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:47:21.808] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:47:21.833] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:47:23.596] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:47:23.617] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:47:24.917] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:47:24.943] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:47:26.680] [DEBUG] info - 94a11090-242a-11e8-b43a-85e82b4cc450
[2018-03-10T17:47:26.700] [DEBUG] info - { tag_ids: [ '5aa3778928a0a17533cd99d6' ],
  _id: 5aa3784128a0a17533cd99da,
  title: '基于定时器或 RAF 的间隔动画',
  summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662593561,
  modify_time: 1520662593561,
  id: '94a11090-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3778928a0a17533cd99d6', name: 'NODE' } ],
  content: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。\n\n因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 requestAnimationFrame 不断修改 state，触发组件更新，从而实现动画效果。\n\n示例\n以一个进度条为例，代码如下所示：\n\n\n```\n// 使用requestAnimationFrame改变state\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent >= 90 ? 100 : percent + 10;\n        const speed = (targetPercent - percent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.min(parseInt(speed * progress + percent, 10), targetPercent);\n            this.setState({\n                percent: currentProgress\n            });\n            if (currentProgress < targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    decrease = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent < 10 ? 0 : percent - 10;\n        const speed = (percent - targetPercent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.max(parseInt(percent - speed * progress, 10), targetPercent);\n            this.setState({\n                    percent: currentProgress\n                });\n            if (currentProgress > targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    render() {\n        const { percent } = this.state;\n\n        return (\n            <div>\n                <div className="progress">\n                    <div className="progress-wrapper" >\n                        <div className="progress-inner" style = {{width: `${percent}%`}} ></div>\n                    </div>\n                    <div className="progress-info" >{percent}%</div>\n                </div>\n                <div className="btns">\n                    <button onClick={this.decrease}>-</button>\n                    <button onClick={this.increase}>+</button>\n                </div>\n            </div>\n        );\n    }\n}\n```' }
[2018-03-10T17:48:40.909] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:48:40.936] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:49:10.654] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:49:10.686] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:49:13.685] [DEBUG] info - 94a11090-242a-11e8-b43a-85e82b4cc450
[2018-03-10T17:49:13.690] [DEBUG] info - { tag_ids: [ '5aa3778928a0a17533cd99d6' ],
  _id: 5aa3784128a0a17533cd99da,
  title: '基于定时器或 RAF 的间隔动画',
  summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662593561,
  modify_time: 1520662593561,
  id: '94a11090-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3778928a0a17533cd99d6', name: 'NODE' } ],
  content: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。\n\n因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 requestAnimationFrame 不断修改 state，触发组件更新，从而实现动画效果。\n\n示例\n以一个进度条为例，代码如下所示：\n\n\n```\n// 使用requestAnimationFrame改变state\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent >= 90 ? 100 : percent + 10;\n        const speed = (targetPercent - percent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.min(parseInt(speed * progress + percent, 10), targetPercent);\n            this.setState({\n                percent: currentProgress\n            });\n            if (currentProgress < targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    decrease = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent < 10 ? 0 : percent - 10;\n        const speed = (percent - targetPercent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.max(parseInt(percent - speed * progress, 10), targetPercent);\n            this.setState({\n                    percent: currentProgress\n                });\n            if (currentProgress > targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    render() {\n        const { percent } = this.state;\n\n        return (\n            <div>\n                <div className="progress">\n                    <div className="progress-wrapper" >\n                        <div className="progress-inner" style = {{width: `${percent}%`}} ></div>\n                    </div>\n                    <div className="progress-info" >{percent}%</div>\n                </div>\n                <div className="btns">\n                    <button onClick={this.decrease}>-</button>\n                    <button onClick={this.increase}>+</button>\n                </div>\n            </div>\n        );\n    }\n}\n```' }
[2018-03-10T17:49:14.604] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:49:14.624] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:49:15.815] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:49:15.851] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520582852418,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:49:22.171] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:49:22.181] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:49:26.614] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:49:26.618] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:49:26.633] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 182551,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_e872150fc32643112d0aa837da23d803',
     name: 'timg (4).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:49:26.632Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_e872150fc32643112d0aa837da23d803',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 182551,
        closed: true } } }
[2018-03-10T17:49:29.931] [INFO] info - fields { content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520582852418,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-10T17:49:29.937] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-10T17:49:29.973] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:49:30.006] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:49:34.163] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:49:34.191] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520424497889,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:49:36.657] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:49:36.663] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520675369933,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:49:38.794] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:49:38.812] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520675369933,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:51:53.323] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:51:53.337] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520675369933,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:52:00.151] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:52:00.157] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520675369933,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:52:02.554] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:52:02.571] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520675369933,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:52:29.241] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T17:52:29.263] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T17:52:34.223] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:52:34.225] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:52:34.228] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 24972,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_11519121be8fdcd08fe6fc900c7e114d',
     name: 'timg (6).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:52:34.228Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_11519121be8fdcd08fe6fc900c7e114d',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 24972,
        closed: true } } }
[2018-03-10T17:52:36.919] [INFO] info - fields { content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。',
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a9fd631187a3d1506c2624c',
  create_time: 1520424497889,
  modify_time: 1520424497889,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-10T17:52:36.925] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-10T17:52:36.966] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:52:37.000] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:53:43.929] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:53:43.949] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:53:48.149] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T17:53:48.167] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:53:50.288] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T17:53:50.295] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520675556921,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T17:57:23.315] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:57:23.361] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:57:24.648] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:57:24.671] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520675369933,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:57:30.590] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:57:30.591] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:57:30.597] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 255495,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_24106d97f005a981ce6607231794493c',
     name: 'timg (3).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:57:30.596Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_24106d97f005a981ce6607231794493c',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 255495,
        closed: true } } }
[2018-03-10T17:57:52.503] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:57:52.507] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:57:52.517] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 40011,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_e7d1b5ae6c90ddd435dd1e67485a4864',
     name: 'timg (7).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:57:52.517Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_e7d1b5ae6c90ddd435dd1e67485a4864',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 40011,
        closed: true } } }
[2018-03-10T17:58:16.428] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:58:16.456] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:58:19.036] [DEBUG] info - 183654b0-2444-11e8-af29-e73e7c70ae4a
[2018-03-10T17:58:19.049] [DEBUG] info - { tag_ids: [ '5aa3779028a0a17533cd99d7' ],
  _id: 5aa3a30f5ac2662e019d714c,
  title: '最后一试',
  summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
  banner: 'http://127.0.0.1:9528/upload/undefined',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520673551739,
  modify_time: 1520673670331,
  id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3779028a0a17533cd99d7', name: 'VUE' } ],
  content: '\n![alt](http://127.0.0.1:9528/upload/fe5ee200-2443-11e8-af29-e73e7c70ae4a.jpg)\n\n\n## 大\n\n水电费\n\n sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n![alt](http://127.0.0.1:9528/upload/05a18e50-2444-11e8-af29-e73e7c70ae4a.jpeg)\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n\n\n\n以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。\n\n后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目\n' }
[2018-03-10T17:58:27.923] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:58:27.945] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:58:30.997] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:58:31.013] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520675369933,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:59:22.754] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:59:22.793] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T17:59:24.370] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T17:59:24.399] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520675369933,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T17:59:27.832] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T17:59:27.837] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T17:59:27.844] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 182551,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_9dca9ac9f467ee48e1ecf63efa5fad49',
     name: 'timg (4).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T09:59:27.843Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_9dca9ac9f467ee48e1ecf63efa5fad49',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 182551,
        closed: true } } }
[2018-03-10T17:59:50.473] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T17:59:50.512] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:00:27.435] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T18:00:27.475] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520675369933,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:00:30.042] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T18:00:30.054] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e8da4c90-2370-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520675369933,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T18:00:34.455] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T18:00:34.456] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T18:00:34.460] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 166756,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_8354fc270899ffe2560fb6fa25f7cf29',
     name: 'timg (9).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T10:00:34.460Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_8354fc270899ffe2560fb6fa25f7cf29',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 166756,
        closed: true } } }
[2018-03-10T18:00:36.335] [INFO] info - fields { content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e0084110-2449-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520675369933,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-10T18:00:36.345] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-10T18:00:36.404] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T18:00:36.455] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e0084110-2449-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676036340,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:00:45.029] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T18:00:45.052] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/e0084110-2449-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676036340,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:00:47.311] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T18:00:47.324] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e0084110-2449-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520676036340,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T18:01:00.505] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T18:01:00.521] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/e0084110-2449-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520676036340,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T18:01:07.457] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T18:01:07.458] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T18:01:07.462] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 35855,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_b841a9f39c99598d18f35afb8581ce78',
     name: 'timg (1).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T10:01:07.462Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_b841a9f39c99598d18f35afb8581ce78',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 35855,
        closed: true } } }
[2018-03-10T18:01:22.010] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T18:01:22.014] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T18:01:22.021] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 156877,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_647561dede079fdca3cc149ab0af64c4',
     name: 'timg (21).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T10:01:22.021Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_647561dede079fdca3cc149ab0af64c4',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 156877,
        closed: true } } }
[2018-03-10T18:01:23.211] [INFO] info - fields { content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/fc615590-2449-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520676036340,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-10T18:01:23.216] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-10T18:01:23.281] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T18:01:23.352] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/fc615590-2449-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676083213,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:01:26.688] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T18:01:26.706] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/fc615590-2449-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520676083213,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T18:01:32.972] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T18:01:32.992] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/fc615590-2449-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520676083213,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T18:01:46.286] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T18:01:46.288] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T18:01:46.294] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 275221,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_2a9cdaa830ad287f24a957895b955ea6',
     name: 'timg (15).jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T10:01:46.293Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_2a9cdaa830ad287f24a957895b955ea6',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 275221,
        closed: true } } }
[2018-03-10T18:01:47.084] [INFO] info - fields { content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/0ad919a0-244a-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520676083213,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-10T18:01:47.095] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-10T18:01:47.132] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T18:01:47.183] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/0ad919a0-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676107089,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:01:48.992] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T18:01:49.017] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/0ad919a0-244a-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520676107089,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T18:02:04.806] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T18:02:04.826] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/0ad919a0-244a-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520676107089,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T18:02:16.909] [INFO] info - __dirname /home/kk/code/VistudioCodeProjects/blog-backend/controller/v1
[2018-03-10T18:02:16.915] [INFO] info - uploadDir /home/kk/code/VistudioCodeProjects/blog-backend/public/upload/
[2018-03-10T18:02:16.926] [INFO] info - { file: 
   File {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     size: 208288,
     path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_2594a4a63fb74f802b78a8111aca26f9',
     name: 'timg (17.jpeg',
     type: 'image/jpeg',
     hash: null,
     lastModifiedDate: 2018-03-10T10:02:16.926Z,
     _writeStream: 
      WriteStream {
        _writableState: [WritableState],
        writable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        path: '/home/kk/code/VistudioCodeProjects/blog-backend/public/upload/upload_2594a4a63fb74f802b78a8111aca26f9',
        fd: null,
        flags: 'w',
        mode: 438,
        start: undefined,
        autoClose: true,
        pos: undefined,
        bytesWritten: 208288,
        closed: true } } }
[2018-03-10T18:02:17.994] [INFO] info - fields { content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：',
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: '5a755018c058b426375e3b5c',
  create_time: 1517637656784,
  modify_time: 1520676107089,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ] }
[2018-03-10T18:02:18.000] [INFO] info - article { ok: 1, nModified: 1, n: 1 }
[2018-03-10T18:02:18.027] [DEBUG] info - 请求参数: { page_size: '10', current_page: '1' }
[2018-03-10T18:02:18.073] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 10,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676137997,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3786528a0a17533cd99dc,
       title: '基于 css3 的简单动画',
       summary: '当 css3 中的 animation 和 transition 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。  示例 我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：  import React, { Component } from \'react\';  export default class Progress extends Component { constructor(props) { super(props); this.state = { percent: 10 }; }  increase = () =>',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662629543,
       modify_time: 1520662629543,
       id: 'aa137b70-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3a30f5ac2662e019d714c,
       title: '最后一试',
       summary: ' 大 水电费  sd发以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 issues，或者通过 pull request 的方式一起参与完善此项目    以此，你可以将功能完整的 easy-mock 服务部署到内网，并且与内网的开发流程（例如 swagger）集成到一起，内网集成与使用方式见本文最后的集成建议。  后续关于 easy-mock 的 bug 和建议，大家可以直接在 github 中提 ',
       banner: 'http://127.0.0.1:9528/upload/undefined',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520673551739,
       modify_time: 1520673670331,
       id: '183654b0-2444-11e8-af29-e73e7c70ae4a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:02:20.203] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T18:02:20.219] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520676137997,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T18:03:40.272] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T18:03:40.291] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676137997,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:03:41.834] [DEBUG] info - 180a1360-242a-11e8-b43a-85e82b4cc450
[2018-03-10T18:03:41.856] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5aa3777028a0a17533cd99d4,
  title: 'Lambda架构在有赞广告平台的应用与演进',
  summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662384534,
  modify_time: 1520662384534,
  id: '180a1360-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '### 有赞广告平台依托于有赞微商城，\n帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把广告系统的数据统计服务演进历程以及踩过的坑、得到的感悟和各位同僚分享一下😊\n\n**大数据系统的Lambda架构**\n\n      大数据处理技术需要解决数据的可伸缩性与复杂性。首先要很好地处理分区与复制，不会导致错误分区引起查询失败。当需要扩展系统        \n       时，可以非常方便地增加节点，系统也能够针对新节点进行rebalance。其次是要让数据成为不可变的。原始数据永远都不能被修改，\n       这样即使犯了错误，写了错误数据，原来好的数据并不会受到破坏。\n\nLambda架构的主要思想是将大数据系\n\n```\n统架构为多个层次：\n批处理层（batchlayer）、\n实时处理层（speedlayer）、\n服务层（servinglayer）。\n\n```\n\n批处理层生产离线数据，是每天重新计算的，实时处理层的数据增量更新，数据时效过去之后会被清理，由批处理层的数据替代。服务层则对外提供数据服务，综合批处理层以及实时处理层的数据。典型的lambda架构图如下： ' }
[2018-03-10T18:04:00.562] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T18:04:00.589] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676137997,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:04:18.245] [DEBUG] info - 94a11090-242a-11e8-b43a-85e82b4cc450
[2018-03-10T18:04:18.262] [DEBUG] info - { tag_ids: [ '5aa3778928a0a17533cd99d6' ],
  _id: 5aa3784128a0a17533cd99da,
  title: '基于定时器或 RAF 的间隔动画',
  summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662593561,
  modify_time: 1520662593561,
  id: '94a11090-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3778928a0a17533cd99d6', name: 'NODE' } ],
  content: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。\n\n因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 requestAnimationFrame 不断修改 state，触发组件更新，从而实现动画效果。\n\n示例\n以一个进度条为例，代码如下所示：\n\n\n```\n// 使用requestAnimationFrame改变state\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent >= 90 ? 100 : percent + 10;\n        const speed = (targetPercent - percent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.min(parseInt(speed * progress + percent, 10), targetPercent);\n            this.setState({\n                percent: currentProgress\n            });\n            if (currentProgress < targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    decrease = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent < 10 ? 0 : percent - 10;\n        const speed = (percent - targetPercent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.max(parseInt(percent - speed * progress, 10), targetPercent);\n            this.setState({\n                    percent: currentProgress\n                });\n            if (currentProgress > targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    render() {\n        const { percent } = this.state;\n\n        return (\n            <div>\n                <div className="progress">\n                    <div className="progress-wrapper" >\n                        <div className="progress-inner" style = {{width: `${percent}%`}} ></div>\n                    </div>\n                    <div className="progress-info" >{percent}%</div>\n                </div>\n                <div className="btns">\n                    <button onClick={this.decrease}>-</button>\n                    <button onClick={this.increase}>+</button>\n                </div>\n            </div>\n        );\n    }\n}\n```' }
[2018-03-10T18:04:21.914] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T18:04:21.954] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676137997,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:04:22.726] [DEBUG] info - 388cb510-2200-11e8-b11a-5d0ef3fc9eb4
[2018-03-10T18:04:22.744] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a9fd631187a3d1506c2624c,
  title: '及时告警可以尽量减少',
  summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
  banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520424497889,
  modify_time: 1520675556921,
  id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。\n\n思路\n现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。\n\n任务状态的维护依赖于任务运行服务器的心跳上报，每个任务设置一个超时时间，在任务启动时向任务状态管理平台发送开始运行信号，在任务运行结束后向管理平台发送运行完成信号。任务管理平台根据任务设置的超时时间，在超时后仍然没有接收到任务完成信号则判定任务失败，将任务失败信号发送回任务运行的服务器。再有任务运行服务器自行处理，如重启任务或者结束任务等。\n\n根据以上的逻辑，实际需要就是在任务运行的服务器实现一个任务调度功能与 HTTP 服务器用来监听管理平台发送的信号；在管理平台这边实现任务服务器信息注册、任务状态监管与超时告警。文字表述比较晦涩，具体流程可以参考一下的流程图。' }
[2018-03-10T18:04:24.338] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T18:04:24.383] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676137997,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:04:25.624] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T18:04:25.644] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520676137997,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T18:04:27.601] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T18:04:27.631] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676137997,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:05:28.728] [DEBUG] info - 94a11090-242a-11e8-b43a-85e82b4cc450
[2018-03-10T18:05:28.745] [DEBUG] info - { tag_ids: [ '5aa3778928a0a17533cd99d6' ],
  _id: 5aa3784128a0a17533cd99da,
  title: '基于定时器或 RAF 的间隔动画',
  summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662593561,
  modify_time: 1520662593561,
  id: '94a11090-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5aa3778928a0a17533cd99d6', name: 'NODE' } ],
  content: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。\n\n因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 requestAnimationFrame 不断修改 state，触发组件更新，从而实现动画效果。\n\n示例\n以一个进度条为例，代码如下所示：\n\n\n```\n// 使用requestAnimationFrame改变state\nimport React, { Component } from \'react\';\n\nexport default class Progress extends Component {  \n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 10\n        };\n    }\n\n    increase = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent >= 90 ? 100 : percent + 10;\n        const speed = (targetPercent - percent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.min(parseInt(speed * progress + percent, 10), targetPercent);\n            this.setState({\n                percent: currentProgress\n            });\n            if (currentProgress < targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    decrease = () => {\n        const percent = this.state.percent;\n        const targetPercent = percent < 10 ? 0 : percent - 10;\n        const speed = (percent - targetPercent) / 400;\n        let start = null;\n        const animate = timestamp => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const currentProgress = Math.max(parseInt(percent - speed * progress, 10), targetPercent);\n            this.setState({\n                    percent: currentProgress\n                });\n            if (currentProgress > targetPercent) {\n                window.requestAnimationFrame(animate);\n            }\n        };\n        window.requestAnimationFrame(animate);\n    }\n\n    render() {\n        const { percent } = this.state;\n\n        return (\n            <div>\n                <div className="progress">\n                    <div className="progress-wrapper" >\n                        <div className="progress-inner" style = {{width: `${percent}%`}} ></div>\n                    </div>\n                    <div className="progress-info" >{percent}%</div>\n                </div>\n                <div className="btns">\n                    <button onClick={this.decrease}>-</button>\n                    <button onClick={this.increase}>+</button>\n                </div>\n            </div>\n        );\n    }\n}\n```' }
[2018-03-10T18:05:34.662] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T18:05:34.691] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676137997,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:06:14.287] [DEBUG] info - 180a1360-242a-11e8-b43a-85e82b4cc450
[2018-03-10T18:06:14.303] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5aa3777028a0a17533cd99d4,
  title: 'Lambda架构在有赞广告平台的应用与演进',
  summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
  banner: '',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1520662384534,
  modify_time: 1520662384534,
  id: '180a1360-242a-11e8-b43a-85e82b4cc450',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '### 有赞广告平台依托于有赞微商城，\n帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把广告系统的数据统计服务演进历程以及踩过的坑、得到的感悟和各位同僚分享一下😊\n\n**大数据系统的Lambda架构**\n\n      大数据处理技术需要解决数据的可伸缩性与复杂性。首先要很好地处理分区与复制，不会导致错误分区引起查询失败。当需要扩展系统        \n       时，可以非常方便地增加节点，系统也能够针对新节点进行rebalance。其次是要让数据成为不可变的。原始数据永远都不能被修改，\n       这样即使犯了错误，写了错误数据，原来好的数据并不会受到破坏。\n\nLambda架构的主要思想是将大数据系\n\n```\n统架构为多个层次：\n批处理层（batchlayer）、\n实时处理层（speedlayer）、\n服务层（servinglayer）。\n\n```\n\n批处理层生产离线数据，是每天重新计算的，实时处理层的数据增量更新，数据时效过去之后会被清理，由批处理层的数据替代。服务层则对外提供数据服务，综合批处理层以及实时处理层的数据。典型的lambda架构图如下： ' }
[2018-03-10T18:06:27.961] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T18:06:27.995] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676137997,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:06:30.054] [DEBUG] info - 99cefd00-08a7-11e8-8862-f9831442ac2a
[2018-03-10T18:06:30.072] [DEBUG] info - { tag_ids: [ '5a755002c058b426375e3b5b' ],
  _id: 5a755018c058b426375e3b5c,
  title: '有赞统一的css/js等资源更新',
  summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
  banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
  catalog_id: '5a754ff6c058b426375e3b5a',
  status: 2,
  create_time: 1517637656784,
  modify_time: 1520676137997,
  id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
  __v: 0,
  catalog_name: '前端',
  tags: [ { id: '5a755002c058b426375e3b5b', name: '小标签1' } ],
  content: '\n## 每当资源变化后\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n    2. 有赞统一的css/js等资源更新\n    有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n\n每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。\n\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n#### 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：\n#### 每当资源变化后，根据一定\n2. 有赞统一的css/js等资源更新\n有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。\n\n而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。\n\n根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时任务管理，可以很方便的触发这类型的定时任务：' }
[2018-03-10T18:06:48.065] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T18:06:48.096] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676137997,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
[2018-03-10T18:08:03.056] [DEBUG] info - 请求参数: { current_page: '1', page_size: '5' }
[2018-03-10T18:08:03.075] [DEBUG] info - 文章列表: { total: 7,
  current_page: 1,
  page_size: 5,
  data: 
   [ { tag_ids: [Array],
       _id: 5a755018c058b426375e3b5c,
       title: '有赞统一的css/js等资源更新',
       summary: '每当资源变化后 每当资源变化后，根据一定的策略，都会先更新到这个数据库，客户端APP根据lastUpdateTime发起sync增量查询，就能拉取所有已变化的资源列表。根据这份列表将资源下载到本地，更新缓存即可。  2. 有赞统一的css/js等资源更新 有赞的前端一般都有固定的发布窗口，每次发布可能会引起一些css/js等静态资源的变更。 而所有当天的总的css/js资源配置都会有一个清单文件在前端指定的git代码库中。 根据上面的两个条件，只要在发布窗口之后，从git代码库读取当天最新的css/js资源清单文件，将每天记录与金翅数据库中已有记录做对比，更新数据即可。我们在金翅的后台做了定时',
       banner: 'http://127.0.0.1:9528/upload/1d1b2c20-244a-11e8-af29-e73e7c70ae4a.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1517637656784,
       modify_time: 1520676137997,
       id: '99cefd00-08a7-11e8-8862-f9831442ac2a',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5a9fd631187a3d1506c2624c,
       title: '及时告警可以尽量减少',
       summary: '在实际生产环境中，避免不了有很多后台运行的任务和定时任务，对任务状态的监控与及时告警可以尽量减少程序出错时对用户造成的影响。针对常见的两种任务类型：定时任务、守护进程内批处理任务，利用 Node.js child_process 实现了任务状态的监控、重启与邮件告警。  思路 现在的互联网已经不是单机作战的时代了，分布式部署是非常常见的方式，一个项目中的任务可能运行在多台服务器上，我们的监控平台要做到重启某个任务就需要知道任务运行的具体服务器，针对这一个问题我们需要获取到任务与服务器关系的确切信息，所以每台运行任务的服务器需要在启动任务时向任务状态管理平台注册自己的信息。  任务状态的维护依赖',
       banner: 'http://127.0.0.1:9528/upload/31a08d30-2200-11e8-b11a-5d0ef3fc9eb4.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520424497889,
       modify_time: 1520675556921,
       id: '388cb510-2200-11e8-b11a-5d0ef3fc9eb4',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3777028a0a17533cd99d4,
       title: 'Lambda架构在有赞广告平台的应用与演进',
       summary: '有赞广告平台依托于有赞微商城， 帮助商家投放广告。通过有赞广告平台，商家可以在腾讯广点通、云堆、小博无线等流量渠道投放广告。 对于有赞广告平台，除了提供基础的广告编辑、投放、素材管理等功能，最重要的就是广告的投放效果的展示、分析功能了。有赞广告平台的数据分析模块提供了不同的时间维度（天、小时），不同的实体维度（广告计划、广告、性别、年龄、地域）下的不同类型指标（曝光、点击、花费、转化下单、增粉数）的分析。所有这些数据都是秒级到10min级别的准实时数据，为了做到将实时数据和离线数据方便的结合，我们引入了大数据系统的lambda架构, 并在这样的lambda架构的基础下演进了几个版本。在这里想把',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662384534,
       modify_time: 1520662384534,
       id: '180a1360-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa377c328a0a17533cd99d8,
       title: 'React 中常见的动画实现方式',
       summary: '现在，用户对于前端页面的要求已经不能满  足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。  React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提',
       banner: 'http://127.0.0.1:9528/upload/489faad0-242a-11e8-b43a-85e82b4cc450.jpeg',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662467919,
       modify_time: 1520662467919,
       id: '49bd9df0-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] },
     { tag_ids: [Array],
       _id: 5aa3784128a0a17533cd99da,
       title: '基于定时器或 RAF 的间隔动画',
       summary: '最早，动画的实现都是依靠定时器 setInterval，setTimeout 或者 requestAnimationFrame(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 ref 或者 findDOMNode() 获取真实的 DOM 节点，直接修改其样式。然而，通过 ref 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。  因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 state 联系起来。首先，需要提取出与变化样式相关的属性，替换为 state，然后在合适的生命周期函数中添加定时器或者 reque',
       banner: '',
       catalog_id: '5a754ff6c058b426375e3b5a',
       status: 2,
       create_time: 1520662593561,
       modify_time: 1520662593561,
       id: '94a11090-242a-11e8-b43a-85e82b4cc450',
       __v: 0,
       catalog_name: '前端',
       tags: [Array] } ] }
